
rquac004_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a2  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fd  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	54 d0       	rcall	.+168    	; 0x152 <main>
  aa:	65 c0       	rjmp	.+202    	; 0x176 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <toggle>:

unsigned char hold = 0x00;
unsigned char count = 0x00;

void toggle() {
	switch (state){//transition
  ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	61 f1       	breq	.+88     	; 0x10e <toggle+0x60>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <toggle+0x14>
  b8:	88 23       	and	r24, r24
  ba:	81 f0       	breq	.+32     	; 0xdc <toggle+0x2e>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	31 f0       	breq	.+12     	; 0xcc <toggle+0x1e>
  c0:	44 c0       	rjmp	.+136    	; 0x14a <toggle+0x9c>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	79 f1       	breq	.+94     	; 0x124 <toggle+0x76>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	c1 f1       	breq	.+112    	; 0x13a <toggle+0x8c>
  ca:	3f c0       	rjmp	.+126    	; 0x14a <toggle+0x9c>
		case Start:
			count = 1;
			state = WaitPress;
			break;
		case WaitPress:
			while (hold == (PINA & 0x01)){
  cc:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <hold>
				if (count == 1){
  d0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
					state = One;
  d4:	42 e0       	ldi	r20, 0x02	; 2
				}
				if (count == 2){
					state = Two;
  d6:	33 e0       	ldi	r19, 0x03	; 3
				}
				if (count == 3) {
					state = Three;
  d8:	54 e0       	ldi	r21, 0x04	; 4
  da:	14 c0       	rjmp	.+40     	; 0x104 <toggle+0x56>
unsigned char count = 0x00;

void toggle() {
	switch (state){//transition
		case Start:
			count = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			state = WaitPress;
  e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  e6:	08 95       	ret
		case WaitPress:
			while (hold == (PINA & 0x01)){
				if (count == 1){
  e8:	91 30       	cpi	r25, 0x01	; 1
  ea:	19 f4       	brne	.+6      	; 0xf2 <toggle+0x44>
					state = One;
  ec:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <state>
  f0:	09 c0       	rjmp	.+18     	; 0x104 <toggle+0x56>
				}
				if (count == 2){
  f2:	92 30       	cpi	r25, 0x02	; 2
  f4:	19 f4       	brne	.+6      	; 0xfc <toggle+0x4e>
					state = Two;
  f6:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <state>
  fa:	04 c0       	rjmp	.+8      	; 0x104 <toggle+0x56>
				}
				if (count == 3) {
  fc:	93 30       	cpi	r25, 0x03	; 3
  fe:	11 f4       	brne	.+4      	; 0x104 <toggle+0x56>
					state = Three;
 100:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <state>
		case Start:
			count = 1;
			state = WaitPress;
			break;
		case WaitPress:
			while (hold == (PINA & 0x01)){
 104:	80 b1       	in	r24, 0x00	; 0
 106:	81 70       	andi	r24, 0x01	; 1
 108:	28 17       	cp	r18, r24
 10a:	71 f3       	breq	.-36     	; 0xe8 <toggle+0x3a>
 10c:	08 95       	ret
					state = Three;
				}
			}
			break;
		case One:
			PORTC = 0xAA;
 10e:	8a ea       	ldi	r24, 0xAA	; 170
 110:	88 b9       	out	0x08, r24	; 8
			count = count + 1;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			state = WaitPress;	
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 122:	08 95       	ret
		case Two:
			PORTC = 0x55;
 124:	85 e5       	ldi	r24, 0x55	; 85
 126:	88 b9       	out	0x08, r24	; 8
			count = count + 1;
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			state = WaitPress;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 138:	08 95       	ret
		case Three:
			PORTC = 0xC3;
 13a:	83 ec       	ldi	r24, 0xC3	; 195
 13c:	88 b9       	out	0x08, r24	; 8
			count = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			state = WaitPress;
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 148:	08 95       	ret
		default:
			state = WaitPress;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 150:	08 95       	ret

00000152 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // config
 152:	11 b8       	out	0x01, r1	; 1
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // config
 158:	84 b9       	out	0x04, r24	; 4
 15a:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // config
 15c:	87 b9       	out	0x07, r24	; 7
 15e:	18 b8       	out	0x08, r1	; 8
		count = 0;
 160:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		PORTC = 0;
 164:	18 b8       	out	0x08, r1	; 8

	while (1) 
    {
		hold = ~PINA & 0x01;
 166:	c1 e0       	ldi	r28, 0x01	; 1
 168:	80 b1       	in	r24, 0x00	; 0
 16a:	8c 27       	eor	r24, r28
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hold>
		toggle();
 172:	9d df       	rcall	.-198    	; 0xae <toggle>
 174:	f9 cf       	rjmp	.-14     	; 0x168 <main+0x16>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
