
rquac004_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087c  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c0  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	08 d0       	rcall	.+16     	; 0xaa <main>
  9a:	97 c0       	rjmp	.+302    	; 0x1ca <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ADC_init>:
 */ 
\
#include <avr/io.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <main>:
	//        the previous conversion completes.
}

int main(void)
{
		DDRA = 0x00; PORTA = 0xFF;
  aa:	11 b8       	out	0x01, r1	; 1
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	82 b9       	out	0x02, r24	; 2
		DDRC = 0xFF; PORTC = 0xFF;
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	88 b9       	out	0x08, r24	; 8
		DDRD = 0xFF; PORTD = 0x00;
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	1b b8       	out	0x0b, r1	; 11
		unsigned short love1 = 0;
		unsigned short love2 = 0;
		ADC_init();
  b8:	f2 df       	rcall	.-28     	; 0x9e <ADC_init>
		unsigned short MAX = ADC;
  ba:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  be:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

    while (1) 
    {
		
		love1 = (char)ADC;
  c2:	e8 e7       	ldi	r30, 0x78	; 120
  c4:	f0 e0       	ldi	r31, 0x00	; 0
		{
			PORTC = 0x02;
		}
		else
		{
			PORTC = 0x01;
  c6:	bb 24       	eor	r11, r11
  c8:	b3 94       	inc	r11
		{
			PORTC = 0x04;
		}
		else if(ADC <= MAX/2)
		{
			PORTC = 0x02;
  ca:	68 94       	set
  cc:	cc 24       	eor	r12, r12
  ce:	c1 f8       	bld	r12, 1
		{
			PORTC = 0x08;
		}
		else if(ADC <= MAX/3)
		{
			PORTC = 0x04;
  d0:	68 94       	set
  d2:	dd 24       	eor	r13, r13
  d4:	d2 f8       	bld	r13, 2
		{
			PORTC = 0x10;
		}
		else if(ADC <= MAX/4)
		{
			PORTC = 0x08;
  d6:	68 94       	set
  d8:	ee 24       	eor	r14, r14
  da:	e3 f8       	bld	r14, 3
		{
			PORTC = 0x20;
		}
		else if(ADC <= MAX/5)
		{
			PORTC = 0x10;
  dc:	68 94       	set
  de:	ff 24       	eor	r15, r15
  e0:	f4 f8       	bld	r15, 4
		{
			PORTC = 0x40;
		}
		else if(ADC <= MAX/6)
		{
			PORTC = 0x20;
  e2:	00 e2       	ldi	r16, 0x20	; 32
		}
		
		
		if(ADC <= MAX/7)
		{
			PORTC = 0x40;
  e4:	10 e4       	ldi	r17, 0x40	; 64
		unsigned short MAX = ADC;

    while (1) 
    {
		
		love1 = (char)ADC;
  e6:	80 81       	ld	r24, Z
  e8:	91 81       	ldd	r25, Z+1	; 0x01
		love2 = (char)(ADC >> 8);
  ea:	80 81       	ld	r24, Z
  ec:	91 81       	ldd	r25, Z+1	; 0x01
		
		if(ADC > MAX)
  ee:	80 81       	ld	r24, Z
  f0:	91 81       	ldd	r25, Z+1	; 0x01
  f2:	48 17       	cp	r20, r24
  f4:	59 07       	cpc	r21, r25
  f6:	10 f4       	brcc	.+4      	; 0xfc <main+0x52>
		{
			MAX = ADC;
  f8:	40 81       	ld	r20, Z
  fa:	51 81       	ldd	r21, Z+1	; 0x01
		}
		
		
		if(ADC <= MAX/7)
  fc:	c0 81       	ld	r28, Z
  fe:	d1 81       	ldd	r29, Z+1	; 0x01
 100:	9a 01       	movw	r18, r20
 102:	a3 e9       	ldi	r26, 0x93	; 147
 104:	b4 e2       	ldi	r27, 0x24	; 36
 106:	52 d0       	rcall	.+164    	; 0x1ac <__umulhisi3>
 108:	28 1b       	sub	r18, r24
 10a:	39 0b       	sbc	r19, r25
 10c:	36 95       	lsr	r19
 10e:	27 95       	ror	r18
 110:	82 0f       	add	r24, r18
 112:	93 1f       	adc	r25, r19
 114:	96 95       	lsr	r25
 116:	87 95       	ror	r24
 118:	96 95       	lsr	r25
 11a:	87 95       	ror	r24
 11c:	8c 17       	cp	r24, r28
 11e:	9d 07       	cpc	r25, r29
 120:	10 f0       	brcs	.+4      	; 0x126 <main+0x7c>
		{
			PORTC = 0x40;
 122:	18 b9       	out	0x08, r17	; 8
 124:	e0 cf       	rjmp	.-64     	; 0xe6 <main+0x3c>
		}
		else if(ADC <= MAX/6)
 126:	c0 81       	ld	r28, Z
 128:	d1 81       	ldd	r29, Z+1	; 0x01
 12a:	9a 01       	movw	r18, r20
 12c:	ab ea       	ldi	r26, 0xAB	; 171
 12e:	ba ea       	ldi	r27, 0xAA	; 170
 130:	3d d0       	rcall	.+122    	; 0x1ac <__umulhisi3>
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	8c 17       	cp	r24, r28
 13c:	9d 07       	cpc	r25, r29
 13e:	10 f0       	brcs	.+4      	; 0x144 <main+0x9a>
		{
			PORTC = 0x20;
 140:	08 b9       	out	0x08, r16	; 8
 142:	d1 cf       	rjmp	.-94     	; 0xe6 <main+0x3c>
		}
		else if(ADC <= MAX/5)
 144:	c0 81       	ld	r28, Z
 146:	d1 81       	ldd	r29, Z+1	; 0x01
 148:	9a 01       	movw	r18, r20
 14a:	ad ec       	ldi	r26, 0xCD	; 205
 14c:	bc ec       	ldi	r27, 0xCC	; 204
 14e:	2e d0       	rcall	.+92     	; 0x1ac <__umulhisi3>
 150:	96 95       	lsr	r25
 152:	87 95       	ror	r24
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	8c 17       	cp	r24, r28
 15a:	9d 07       	cpc	r25, r29
 15c:	10 f0       	brcs	.+4      	; 0x162 <main+0xb8>
		{
			PORTC = 0x10;
 15e:	f8 b8       	out	0x08, r15	; 8
 160:	c2 cf       	rjmp	.-124    	; 0xe6 <main+0x3c>
		}
		else if(ADC <= MAX/4)
 162:	20 81       	ld	r18, Z
 164:	31 81       	ldd	r19, Z+1	; 0x01
 166:	ca 01       	movw	r24, r20
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	82 17       	cp	r24, r18
 172:	93 07       	cpc	r25, r19
 174:	10 f0       	brcs	.+4      	; 0x17a <main+0xd0>
		{
			PORTC = 0x08;
 176:	e8 b8       	out	0x08, r14	; 8
 178:	b6 cf       	rjmp	.-148    	; 0xe6 <main+0x3c>
		}
		else if(ADC <= MAX/3)
 17a:	c0 81       	ld	r28, Z
 17c:	d1 81       	ldd	r29, Z+1	; 0x01
 17e:	9a 01       	movw	r18, r20
 180:	ab ea       	ldi	r26, 0xAB	; 171
 182:	ba ea       	ldi	r27, 0xAA	; 170
 184:	13 d0       	rcall	.+38     	; 0x1ac <__umulhisi3>
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	8c 17       	cp	r24, r28
 18c:	9d 07       	cpc	r25, r29
 18e:	10 f0       	brcs	.+4      	; 0x194 <main+0xea>
		{
			PORTC = 0x04;
 190:	d8 b8       	out	0x08, r13	; 8
 192:	a9 cf       	rjmp	.-174    	; 0xe6 <main+0x3c>
		}
		else if(ADC <= MAX/2)
 194:	20 81       	ld	r18, Z
 196:	31 81       	ldd	r19, Z+1	; 0x01
 198:	ca 01       	movw	r24, r20
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	82 17       	cp	r24, r18
 1a0:	93 07       	cpc	r25, r19
 1a2:	10 f0       	brcs	.+4      	; 0x1a8 <main+0xfe>
		{
			PORTC = 0x02;
 1a4:	c8 b8       	out	0x08, r12	; 8
 1a6:	9f cf       	rjmp	.-194    	; 0xe6 <main+0x3c>
		}
		else
		{
			PORTC = 0x01;
 1a8:	b8 b8       	out	0x08, r11	; 8
 1aa:	9d cf       	rjmp	.-198    	; 0xe6 <main+0x3c>

000001ac <__umulhisi3>:
 1ac:	a2 9f       	mul	r26, r18
 1ae:	b0 01       	movw	r22, r0
 1b0:	b3 9f       	mul	r27, r19
 1b2:	c0 01       	movw	r24, r0
 1b4:	a3 9f       	mul	r26, r19
 1b6:	70 0d       	add	r23, r0
 1b8:	81 1d       	adc	r24, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	91 1d       	adc	r25, r1
 1be:	b2 9f       	mul	r27, r18
 1c0:	70 0d       	add	r23, r0
 1c2:	81 1d       	adc	r24, r1
 1c4:	11 24       	eor	r1, r1
 1c6:	91 1d       	adc	r25, r1
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
