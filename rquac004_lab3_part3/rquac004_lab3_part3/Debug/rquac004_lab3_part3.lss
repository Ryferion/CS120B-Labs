
rquac004_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a84  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000815  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000421  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	54 c0       	rjmp	.+168    	; 0x144 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
}


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // config
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // config
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // config
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	18 b8       	out	0x08, r1	; 8
	unsigned char hold4 = 0x00;
	unsigned char hold5 = 0x00;
	unsigned char hold6 = 0x00;
	unsigned char hold7 = 0x00;
	unsigned char level = 0x00;
	unsigned char output = 0x00;
  ac:	40 e0       	ldi	r20, 0x00	; 0
    while (1) 
    {
		hold1 = PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
		hold2 = PINA & 0x02;
  b0:	30 b1       	in	r19, 0x00	; 0
		hold3 = PINA & 0x04;
  b2:	20 b1       	in	r18, 0x00	; 0
		hold4 = PINA & 0x08;
  b4:	90 b1       	in	r25, 0x00	; 0
		hold5 = PINA & 0x10;
  b6:	50 b1       	in	r21, 0x00	; 0
  b8:	50 71       	andi	r21, 0x10	; 16
		hold6 = PINA & 0x20;
  ba:	70 b1       	in	r23, 0x00	; 0
		hold7 = PINA & 0x40;
  bc:	e0 b1       	in	r30, 0x00	; 0
		level = hold1 + hold2 + hold3 + hold4;
  be:	68 2f       	mov	r22, r24
  c0:	61 70       	andi	r22, 0x01	; 1
  c2:	83 2f       	mov	r24, r19
  c4:	82 70       	andi	r24, 0x02	; 2
  c6:	86 0f       	add	r24, r22
  c8:	24 70       	andi	r18, 0x04	; 4
  ca:	82 0f       	add	r24, r18
  cc:	98 70       	andi	r25, 0x08	; 8
  ce:	89 0f       	add	r24, r25
		if (level <= 0){
  d0:	99 f1       	breq	.+102    	; 0x138 <main+0x9a>
			output = 0;
		}
		if ((hold5 != 0x00) && (hold6 != 0x00) && (hold7 == 0x00)){
  d2:	55 23       	and	r21, r21
  d4:	41 f0       	breq	.+16     	; 0xe6 <main+0x48>
  d6:	75 ff       	sbrs	r23, 5
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <main+0x48>
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x40>
		hold5 = PINA & 0x10;
		hold6 = PINA & 0x20;
		hold7 = PINA & 0x40;
		level = hold1 + hold2 + hold3 + hold4;
		if (level <= 0){
			output = 0;
  dc:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((hold5 != 0x00) && (hold6 != 0x00) && (hold7 == 0x00)){
  de:	e6 fd       	sbrc	r30, 6
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x48>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  e2:	40 68       	ori	r20, 0x80	; 128
		level = hold1 + hold2 + hold3 + hold4;
		if (level <= 0){
			output = 0;
		}
		if ((hold5 != 0x00) && (hold6 != 0x00) && (hold7 == 0x00)){
			output = SetBit(output, 7, 1);
  e4:	24 c0       	rjmp	.+72     	; 0x12e <main+0x90>
		}
		else if ((level == 1) || (level == 2)){
  e6:	9f ef       	ldi	r25, 0xFF	; 255
  e8:	98 0f       	add	r25, r24
  ea:	92 30       	cpi	r25, 0x02	; 2
  ec:	10 f4       	brcc	.+4      	; 0xf2 <main+0x54>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ee:	40 62       	ori	r20, 0x20	; 32
  f0:	1e c0       	rjmp	.+60     	; 0x12e <main+0x90>
			output = SetBit(output, 7, 1);
		}
		else if ((level == 1) || (level == 2)){
			output = SetBit(output, 5, 1);
		}
		else if ((level == 3) || (level == 4)){
  f2:	9d ef       	ldi	r25, 0xFD	; 253
  f4:	98 0f       	add	r25, r24
  f6:	92 30       	cpi	r25, 0x02	; 2
  f8:	18 f4       	brcc	.+6      	; 0x100 <main+0x62>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  fa:	40 63       	ori	r20, 0x30	; 48
  fc:	18 c0       	rjmp	.+48     	; 0x12e <main+0x90>
		hold5 = PINA & 0x10;
		hold6 = PINA & 0x20;
		hold7 = PINA & 0x40;
		level = hold1 + hold2 + hold3 + hold4;
		if (level <= 0){
			output = 0;
  fe:	40 e0       	ldi	r20, 0x00	; 0
		}
		else if ((level == 3) || (level == 4)){
			output = SetBit(output, 5, 1);
			output = SetBit(output, 4, 1);
		}
		else if ((level == 5) || (level == 6)){
 100:	9b ef       	ldi	r25, 0xFB	; 251
 102:	98 0f       	add	r25, r24
 104:	92 30       	cpi	r25, 0x02	; 2
 106:	10 f4       	brcc	.+4      	; 0x10c <main+0x6e>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 108:	48 63       	ori	r20, 0x38	; 56
 10a:	11 c0       	rjmp	.+34     	; 0x12e <main+0x90>
		else if ((level == 5) || (level == 6)){
			for (unsigned char i = 5; i >= 3; i = i - 1){
				output = SetBit(output, i, 1);
			}
		}
		else if ((level >= 7) && (level <= 9)){
 10c:	99 ef       	ldi	r25, 0xF9	; 249
 10e:	98 0f       	add	r25, r24
 110:	93 30       	cpi	r25, 0x03	; 3
 112:	10 f4       	brcc	.+4      	; 0x118 <main+0x7a>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 114:	4c 63       	ori	r20, 0x3C	; 60
 116:	0b c0       	rjmp	.+22     	; 0x12e <main+0x90>
		else if ((level >= 7) && (level <= 9)){
			for (unsigned char i = 5; i >= 2; i = i - 1){
				output = SetBit(output, i, 1);
			}
		}
		else if ((level >= 10) && (level <= 12)){
 118:	96 ef       	ldi	r25, 0xF6	; 246
 11a:	98 0f       	add	r25, r24
 11c:	93 30       	cpi	r25, 0x03	; 3
 11e:	10 f4       	brcc	.+4      	; 0x124 <main+0x86>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 120:	4e 63       	ori	r20, 0x3E	; 62
 122:	05 c0       	rjmp	.+10     	; 0x12e <main+0x90>
		else if ((level >= 10) && (level <= 12)){
			for (unsigned char i = 5; i >= 1; i = i - 1){
				output = SetBit(output, i, 1);
			}
		}
		else if ((level >= 13) && (level <=15)){
 124:	93 ef       	ldi	r25, 0xF3	; 243
 126:	98 0f       	add	r25, r24
 128:	93 30       	cpi	r25, 0x03	; 3
 12a:	08 f4       	brcc	.+2      	; 0x12e <main+0x90>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x8e>
			for (unsigned char i = 5; i >= 0; i = i - 1){
				output = SetBit(output, i, 1);
			}
		}
		if (level <= 4){
 12e:	85 30       	cpi	r24, 0x05	; 5
 130:	08 f4       	brcc	.+2      	; 0x134 <main+0x96>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 132:	40 64       	ori	r20, 0x40	; 64
			}
		}
		if (level <= 4){
			output = SetBit(output, 6, 1);
		}
		PORTC = output;
 134:	48 b9       	out	0x08, r20	; 8
    }
 136:	bb cf       	rjmp	.-138    	; 0xae <main+0x10>
		hold7 = PINA & 0x40;
		level = hold1 + hold2 + hold3 + hold4;
		if (level <= 0){
			output = 0;
		}
		if ((hold5 != 0x00) && (hold6 != 0x00) && (hold7 == 0x00)){
 138:	55 23       	and	r21, r21
 13a:	09 f3       	breq	.-62     	; 0xfe <main+0x60>
 13c:	75 fd       	sbrc	r23, 5
 13e:	ce cf       	rjmp	.-100    	; 0xdc <main+0x3e>
		hold5 = PINA & 0x10;
		hold6 = PINA & 0x20;
		hold7 = PINA & 0x40;
		level = hold1 + hold2 + hold3 + hold4;
		if (level <= 0){
			output = 0;
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	d7 cf       	rjmp	.-82     	; 0xf2 <main+0x54>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
