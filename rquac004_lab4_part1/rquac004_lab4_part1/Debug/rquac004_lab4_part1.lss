
rquac004_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000890  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bf  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	44 d0       	rcall	.+136    	; 0x132 <main>
  aa:	4e c0       	rjmp	.+156    	; 0x148 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <toggle>:
}state;

unsigned char hold = 0x00;

void toggle() {
	switch (state){//transition
  ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	49 f0       	breq	.+18     	; 0xc8 <toggle+0x1a>
  b6:	84 30       	cpi	r24, 0x04	; 4
  b8:	c1 f5       	brne	.+112    	; 0x12a <toggle+0x7c>
				state = WaitSwitch;
			}
			}
			break;
		case WaitSwitch2:
			while (hold == (PINA & 0x01)){
  ba:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  be:	29 2f       	mov	r18, r25
  c0:	21 70       	andi	r18, 0x01	; 1
			if ((hold & 0x01) != 0x00){
				state = SwitchLight2;
			} else {
				state = WaitSwitch2;
  c2:	44 e0       	ldi	r20, 0x04	; 4
			}
			break;
		case WaitSwitch2:
			while (hold == (PINA & 0x01)){
			if ((hold & 0x01) != 0x00){
				state = SwitchLight2;
  c4:	32 e0       	ldi	r19, 0x02	; 2
  c6:	1a c0       	rjmp	.+52     	; 0xfc <toggle+0x4e>
	switch (state){//transition
		case Start:
			state = WaitSwitch;
			break;
		case WaitSwitch:
			while (hold == (PINA & 0x01)){
  c8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  cc:	29 2f       	mov	r18, r25
  ce:	21 70       	andi	r18, 0x01	; 1
			if ((hold & 0x01) != 0x00){
				state = SwitchLight;
			} else {
				state = WaitSwitch;
  d0:	43 e0       	ldi	r20, 0x03	; 3
			state = WaitSwitch;
			break;
		case WaitSwitch:
			while (hold == (PINA & 0x01)){
			if ((hold & 0x01) != 0x00){
				state = SwitchLight;
  d2:	31 e0       	ldi	r19, 0x01	; 1
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <toggle+0x36>
		case Start:
			state = WaitSwitch;
			break;
		case WaitSwitch:
			while (hold == (PINA & 0x01)){
			if ((hold & 0x01) != 0x00){
  d6:	22 23       	and	r18, r18
  d8:	19 f0       	breq	.+6      	; 0xe0 <toggle+0x32>
				state = SwitchLight;
  da:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <state>
  de:	02 c0       	rjmp	.+4      	; 0xe4 <toggle+0x36>
			} else {
				state = WaitSwitch;
  e0:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <state>
	switch (state){//transition
		case Start:
			state = WaitSwitch;
			break;
		case WaitSwitch:
			while (hold == (PINA & 0x01)){
  e4:	80 b1       	in	r24, 0x00	; 0
  e6:	81 70       	andi	r24, 0x01	; 1
  e8:	98 17       	cp	r25, r24
  ea:	a9 f3       	breq	.-22     	; 0xd6 <toggle+0x28>
  ec:	0b c0       	rjmp	.+22     	; 0x104 <toggle+0x56>
			}
			}
			break;
		case WaitSwitch2:
			while (hold == (PINA & 0x01)){
			if ((hold & 0x01) != 0x00){
  ee:	22 23       	and	r18, r18
  f0:	19 f0       	breq	.+6      	; 0xf8 <toggle+0x4a>
				state = SwitchLight2;
  f2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <state>
  f6:	02 c0       	rjmp	.+4      	; 0xfc <toggle+0x4e>
			} else {
				state = WaitSwitch2;
  f8:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <state>
				state = WaitSwitch;
			}
			}
			break;
		case WaitSwitch2:
			while (hold == (PINA & 0x01)){
  fc:	80 b1       	in	r24, 0x00	; 0
  fe:	81 70       	andi	r24, 0x01	; 1
 100:	98 17       	cp	r25, r24
 102:	a9 f3       	breq	.-22     	; 0xee <toggle+0x40>
		default:
			state = WaitSwitch;
			break;
	}
	
	switch (state){//actions
 104:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	19 f0       	breq	.+6      	; 0x112 <toggle+0x64>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	39 f0       	breq	.+14     	; 0x11e <toggle+0x70>
 110:	0c c0       	rjmp	.+24     	; 0x12a <toggle+0x7c>
		case SwitchLight:
			PORTB = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	85 b9       	out	0x05, r24	; 5
			state = WaitSwitch2;
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 11c:	08 95       	ret
		case SwitchLight2:
			PORTB = 0x02;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	85 b9       	out	0x05, r24	; 5
			state = WaitSwitch;
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 128:	08 95       	ret
		default:
			state = WaitSwitch;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 130:	08 95       	ret

00000132 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // config
 132:	11 b8       	out	0x01, r1	; 1
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // config
 138:	84 b9       	out	0x04, r24	; 4
 13a:	15 b8       	out	0x05, r1	; 5

    while (1) 
    {
		hold = PINA & 0x01;
 13c:	80 b1       	in	r24, 0x00	; 0
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		toggle();
 144:	b4 df       	rcall	.-152    	; 0xae <toggle>
 146:	fa cf       	rjmp	.-12     	; 0x13c <main+0xa>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
