
rquac004_lab4_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008db  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000461  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	46 d1       	rcall	.+652    	; 0x336 <main>
  aa:	88 c1       	rjmp	.+784    	; 0x3bc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <toggle>:
unsigned char hold1 = 0x00;
unsigned char hold2 = 0x00;
unsigned char hold3 = 0x00;
unsigned char count = 0x00;

void toggle() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch (state){//transition
  b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	a1 f1       	breq	.+104    	; 0x12c <toggle+0x7e>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	2c f4       	brge	.+10     	; 0xd4 <toggle+0x26>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	59 f0       	breq	.+22     	; 0xe4 <toggle+0x36>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	69 f0       	breq	.+26     	; 0xec <toggle+0x3e>
  d2:	f2 c0       	rjmp	.+484    	; 0x2b8 <toggle+0x20a>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <toggle+0x2e>
  da:	57 c0       	rjmp	.+174    	; 0x18a <toggle+0xdc>
  dc:	04 97       	sbiw	r24, 0x04	; 4
  de:	09 f4       	brne	.+2      	; 0xe2 <toggle+0x34>
  e0:	97 c0       	rjmp	.+302    	; 0x210 <toggle+0x162>
  e2:	ea c0       	rjmp	.+468    	; 0x2b8 <toggle+0x20a>
		case Start:
			state = WaitPress;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
  ea:	e9 c0       	rjmp	.+466    	; 0x2be <toggle+0x210>
		case WaitPress:
			if ((hold1 != 0x00) || (hold2 != 0x00)){
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
  f0:	88 23       	and	r24, r24
  f2:	21 f4       	brne	.+8      	; 0xfc <toggle+0x4e>
  f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <toggle+0x56>
				state = PressHash;
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
			}
			break;
 102:	dd c0       	rjmp	.+442    	; 0x2be <toggle+0x210>
			state = WaitPress;
			break;
		case WaitPress:
			if ((hold1 != 0x00) || (hold2 != 0x00)){
				state = PressHash;
			} else if (hold != 0x00){
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	88 23       	and	r24, r24
 10a:	21 f0       	breq	.+8      	; 0x114 <toggle+0x66>
				state = PressX;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
			}
			break;
 112:	d5 c0       	rjmp	.+426    	; 0x2be <toggle+0x210>
		case WaitPress:
			if ((hold1 != 0x00) || (hold2 != 0x00)){
				state = PressHash;
			} else if (hold != 0x00){
				state = PressX;
			} else if (hold3 != 0x00){
 114:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 118:	88 23       	and	r24, r24
 11a:	21 f0       	breq	.+8      	; 0x124 <toggle+0x76>
				state = Lock;
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else {
				state = WaitPress;
			}
			break;
 122:	cd c0       	rjmp	.+410    	; 0x2be <toggle+0x210>
			} else if (hold != 0x00){
				state = PressX;
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			}
			break;
 12a:	c9 c0       	rjmp	.+402    	; 0x2be <toggle+0x210>
		case PressX:
		PORTC = 0;
 12c:	88 e2       	ldi	r24, 0x28	; 40
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	10 82       	st	Z, r1
			while (hold == (PINA & 0x01)){
 134:	1a c0       	rjmp	.+52     	; 0x16a <toggle+0xbc>
				if (hold != 0x00){
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	88 23       	and	r24, r24
 13c:	69 f0       	breq	.+26     	; 0x158 <toggle+0xaa>
					count = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
					state = Lock;
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 156:	09 c0       	rjmp	.+18     	; 0x16a <toggle+0xbc>
				} else if (hold3 != 0x00){
 158:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <toggle+0xbc>
					state = Lock;
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 166:	00 00       	nop
				}
			}
			break;
 168:	aa c0       	rjmp	.+340    	; 0x2be <toggle+0x210>
				state = WaitPress;
			}
			break;
		case PressX:
		PORTC = 0;
			while (hold == (PINA & 0x01)){
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	81 70       	andi	r24, 0x01	; 1
 180:	99 27       	eor	r25, r25
 182:	28 17       	cp	r18, r24
 184:	39 07       	cpc	r19, r25
 186:	b9 f2       	breq	.-82     	; 0x136 <toggle+0x88>
				} else if (hold3 != 0x00){
					state = Lock;
					break;
				}
			}
			break;
 188:	9a c0       	rjmp	.+308    	; 0x2be <toggle+0x210>
		case PressY:
			count = 0;
 18a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			PORTC = count;
 18e:	88 e2       	ldi	r24, 0x28	; 40
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
				if (hold2 != 0x00){
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 19e:	88 23       	and	r24, r24
 1a0:	39 f1       	breq	.+78     	; 0x1f0 <toggle+0x142>
					count = 4;
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
					state = WaitPress;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 1ba:	81 c0       	rjmp	.+258    	; 0x2be <toggle+0x210>
				}
			while (hold1 == (PINA & 0x02)){
				if (hold1 != 0x00){
 1bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 1c0:	88 23       	and	r24, r24
 1c2:	69 f0       	breq	.+26     	; 0x1de <toggle+0x130>
					count = 2;
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
					state = Unlock;
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <toggle+0x142>
				} else if (hold3 != 0x00){
 1de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 1e2:	88 23       	and	r24, r24
 1e4:	29 f0       	breq	.+10     	; 0x1f0 <toggle+0x142>
					state = Lock;
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 1ec:	00 00       	nop
				}
			}
		break;
 1ee:	67 c0       	rjmp	.+206    	; 0x2be <toggle+0x210>
					count = 4;
					PORTC = count;
					state = WaitPress;
					break;
				}
			while (hold1 == (PINA & 0x02)){
 1f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	82 70       	andi	r24, 0x02	; 2
 206:	99 27       	eor	r25, r25
 208:	28 17       	cp	r18, r24
 20a:	39 07       	cpc	r19, r25
 20c:	b9 f2       	breq	.-82     	; 0x1bc <toggle+0x10e>
				} else if (hold3 != 0x00){
					state = Lock;
					break;
				}
			}
		break;
 20e:	57 c0       	rjmp	.+174    	; 0x2be <toggle+0x210>
		case PressHash:
			count = 0;
 210:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			PORTC = count;
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
				if (hold1 != 0x00){
 220:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 224:	88 23       	and	r24, r24
 226:	b9 f1       	breq	.+110    	; 0x296 <toggle+0x1e8>
					count = 2;
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
					state = WaitPress;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 240:	3e c0       	rjmp	.+124    	; 0x2be <toggle+0x210>
				}
			while (hold2 == (PINA & 0x04)){
				if (hold1 != 0x00){
 242:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 246:	88 23       	and	r24, r24
 248:	69 f0       	breq	.+26     	; 0x264 <toggle+0x1b6>
					count = 2;
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
					state = WaitPress;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 262:	29 c0       	rjmp	.+82     	; 0x2b6 <toggle+0x208>
				}
				if (hold2 != 0x00){
 264:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 268:	88 23       	and	r24, r24
 26a:	69 f0       	breq	.+26     	; 0x286 <toggle+0x1d8>
					count = 4;
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 272:	88 e2       	ldi	r24, 0x28	; 40
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
					state = PressY;
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 284:	08 c0       	rjmp	.+16     	; 0x296 <toggle+0x1e8>
				} else if (hold3 != 0x00){
 286:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 28a:	88 23       	and	r24, r24
 28c:	21 f0       	breq	.+8      	; 0x296 <toggle+0x1e8>
					state = Lock;
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 294:	10 c0       	rjmp	.+32     	; 0x2b6 <toggle+0x208>
					count = 2;
					PORTC = count;
					state = WaitPress;
					break;
				}
			while (hold2 == (PINA & 0x04)){
 296:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	84 70       	andi	r24, 0x04	; 4
 2ac:	99 27       	eor	r25, r25
 2ae:	28 17       	cp	r18, r24
 2b0:	39 07       	cpc	r19, r25
 2b2:	39 f2       	breq	.-114    	; 0x242 <toggle+0x194>
				} else if (hold3 != 0x00){
					state = Lock;
					break;
				}
			}
		break;
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <toggle+0x210>
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <toggle+0x210>
		default:
			state = Start;
 2b8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state>
			break;
 2bc:	00 00       	nop
	}
	
	switch (state){ //actions
 2be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
 2c2:	88 2f       	mov	r24, r24
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	86 30       	cpi	r24, 0x06	; 6
 2c8:	91 05       	cpc	r25, r1
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <toggle+0x224>
 2cc:	07 97       	sbiw	r24, 0x07	; 7
 2ce:	09 f1       	breq	.+66     	; 0x312 <toggle+0x264>
			PORTB = 0;
			PORTC = 0;
			state = WaitPress;
			break;
	}
}
 2d0:	2e c0       	rjmp	.+92     	; 0x32e <toggle+0x280>
			break;
	}
	
	switch (state){ //actions
		case Unlock:
			if ((PINB & 0x01) != 0x00){
 2d2:	83 e2       	ldi	r24, 0x23	; 35
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	fc 01       	movw	r30, r24
 2d8:	80 81       	ld	r24, Z
 2da:	88 2f       	mov	r24, r24
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	81 70       	andi	r24, 0x01	; 1
 2e0:	99 27       	eor	r25, r25
 2e2:	89 2b       	or	r24, r25
 2e4:	49 f0       	breq	.+18     	; 0x2f8 <toggle+0x24a>
				PORTB = 0;
 2e6:	85 e2       	ldi	r24, 0x25	; 37
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	10 82       	st	Z, r1
				PORTC = 0;
 2ee:	88 e2       	ldi	r24, 0x28	; 40
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	fc 01       	movw	r30, r24
 2f4:	10 82       	st	Z, r1
 2f6:	09 c0       	rjmp	.+18     	; 0x30a <toggle+0x25c>
				} else {
				PORTB = 1;
 2f8:	85 e2       	ldi	r24, 0x25	; 37
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
				PORTC = 0;
 302:	88 e2       	ldi	r24, 0x28	; 40
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	10 82       	st	Z, r1
				}
			state = WaitPress;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
 310:	0e c0       	rjmp	.+28     	; 0x32e <toggle+0x280>
		case Lock:
			count = 0;
 312:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			PORTB = 0;
 316:	85 e2       	ldi	r24, 0x25	; 37
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	10 82       	st	Z, r1
			PORTC = 0;
 31e:	88 e2       	ldi	r24, 0x28	; 40
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	10 82       	st	Z, r1
			state = WaitPress;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
 32c:	00 00       	nop
	}
}
 32e:	00 00       	nop
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <main>:

int main(void)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // config
 33e:	81 e2       	ldi	r24, 0x21	; 33
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	10 82       	st	Z, r1
 346:	82 e2       	ldi	r24, 0x22	; 34
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // config
 350:	84 e2       	ldi	r24, 0x24	; 36
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	fc 01       	movw	r30, r24
 358:	20 83       	st	Z, r18
 35a:	85 e2       	ldi	r24, 0x25	; 37
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	fc 01       	movw	r30, r24
 360:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // config
 362:	87 e2       	ldi	r24, 0x27	; 39
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
 36c:	88 e2       	ldi	r24, 0x28	; 40
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	10 82       	st	Z, r1
		count = 0;
 374:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
		PORTB = 0;
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	fc 01       	movw	r30, r24
 37e:	10 82       	st	Z, r1
    while (1) 
    {
		hold = PINA & 0x01;
 380:	80 e2       	ldi	r24, 0x20	; 32
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	fc 01       	movw	r30, r24
 386:	80 81       	ld	r24, Z
 388:	81 70       	andi	r24, 0x01	; 1
 38a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		hold1 = PINA & 0x02;
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	80 81       	ld	r24, Z
 396:	82 70       	andi	r24, 0x02	; 2
 398:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hold1>
		hold2 = PINA & 0x04;
 39c:	80 e2       	ldi	r24, 0x20	; 32
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fc 01       	movw	r30, r24
 3a2:	80 81       	ld	r24, Z
 3a4:	84 70       	andi	r24, 0x04	; 4
 3a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hold2>
		hold3 = PINA & 0x80;
 3aa:	80 e2       	ldi	r24, 0x20	; 32
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	fc 01       	movw	r30, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	80 78       	andi	r24, 0x80	; 128
 3b4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <hold3>
		toggle();
 3b8:	7a de       	rcall	.-780    	; 0xae <toggle>
    }
 3ba:	e2 cf       	rjmp	.-60     	; 0x380 <main+0x4a>

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
