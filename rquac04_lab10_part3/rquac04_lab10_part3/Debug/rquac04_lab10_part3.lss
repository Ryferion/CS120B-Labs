
rquac04_lab10_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000064a  000006de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800106  00800106  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000923  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007eb  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035d  00000000  00000000  000018aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000301  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000024e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	8b c0       	rjmp	.+278    	; 0x14c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e4       	ldi	r30, 0x4A	; 74
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d3 d0       	rcall	.+422    	; 0x26a <main>
  c4:	c0 c2       	rjmp	.+1408   	; 0x646 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2b e0       	ldi	r18, 0x0B	; 11
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2d e7       	ldi	r18, 0x7D	; 125
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 83       	std	Z+1, r19	; 0x01
  e6:	20 83       	st	Z, r18
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 104:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 108:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 10c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 110:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 114:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 118:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 11c:	8f e5       	ldi	r24, 0x5F	; 95
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2f e5       	ldi	r18, 0x5F	; 95
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	20 68       	ori	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	00 00       	nop
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <TimerISR>:

void TimerISR() {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 144:	00 00       	nop
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 15c:	0f 92       	push	r0
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 17e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 182:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 186:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 18a:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	a1 09       	sbc	r26, r1
 192:	b1 09       	sbc	r27, r1
 194:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 198:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 19c:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 1a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 1a8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 1ac:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 1b0:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 1b4:	89 2b       	or	r24, r25
 1b6:	8a 2b       	or	r24, r26
 1b8:	8b 2b       	or	r24, r27
 1ba:	89 f4       	brne	.+34     	; 0x1de <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 1bc:	bc df       	rcall	.-136    	; 0x136 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1d2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1d6:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1da:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 1de:	00 00       	nop
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	bf 91       	pop	r27
 1ea:	af 91       	pop	r26
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	7f 91       	pop	r23
 1f2:	6f 91       	pop	r22
 1f4:	5f 91       	pop	r21
 1f6:	4f 91       	pop	r20
 1f8:	3f 91       	pop	r19
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 202:	0f 90       	pop	r0
 204:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	00 d0       	rcall	.+0      	; 0x214 <TimerSet+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <TimerSet+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	69 83       	std	Y+1, r22	; 0x01
 21c:	7a 83       	std	Y+2, r23	; 0x02
 21e:	8b 83       	std	Y+3, r24	; 0x03
 220:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	ab 81       	ldd	r26, Y+3	; 0x03
 228:	bc 81       	ldd	r27, Y+4	; 0x04
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 22e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 232:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 236:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 242:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 246:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 24a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 24e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 252:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 256:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
}
 25a:	00 00       	nop
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <main>:
unsigned char temp;
volatile unsigned char flag;
unsigned long long int counterWithLove;// love is always the answer. NO QUESTION

int main(void)
{
 26a:	2f 92       	push	r2
 26c:	3f 92       	push	r3
 26e:	4f 92       	push	r4
 270:	5f 92       	push	r5
 272:	6f 92       	push	r6
 274:	7f 92       	push	r7
 276:	8f 92       	push	r8
 278:	9f 92       	push	r9
 27a:	af 92       	push	r10
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	28 97       	sbiw	r28, 0x08	; 8
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF; // input for A
 29e:	81 e2       	ldi	r24, 0x21	; 33
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	10 82       	st	Z, r1
 2a6:	82 e2       	ldi	r24, 0x22	; 34
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // output for C
 2b0:	87 e2       	ldi	r24, 0x27	; 39
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
 2ba:	88 e2       	ldi	r24, 0x28	; 40
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;//output for D
 2c2:	8a e2       	ldi	r24, 0x2A	; 42
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	8b e2       	ldi	r24, 0x2B	; 43
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	10 82       	st	Z, r1
	
	TimerSet(2); // sets timer to go every 100 ms;
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	98 df       	rcall	.-208    	; 0x20e <TimerSet>
	TimerOn();
 2de:	f4 de       	rcall	.-536    	; 0xc8 <TimerOn>
 2e0:	20 90 0d 01 	lds	r2, 0x010D	; 0x80010d <counterWithLove>
	
	
    while (1) //ONE Mealy state machine so no need for switch statements
    {
	
		if(counterWithLove %500 == 0)// blinks one every second
 2e4:	30 90 0e 01 	lds	r3, 0x010E	; 0x80010e <counterWithLove+0x1>
 2e8:	40 90 0f 01 	lds	r4, 0x010F	; 0x80010f <counterWithLove+0x2>
 2ec:	50 90 10 01 	lds	r5, 0x0110	; 0x800110 <counterWithLove+0x3>
 2f0:	60 90 11 01 	lds	r6, 0x0111	; 0x800111 <counterWithLove+0x4>
 2f4:	70 90 12 01 	lds	r7, 0x0112	; 0x800112 <counterWithLove+0x5>
 2f8:	80 90 13 01 	lds	r8, 0x0113	; 0x800113 <counterWithLove+0x6>
 2fc:	90 90 14 01 	lds	r9, 0x0114	; 0x800114 <counterWithLove+0x7>
 300:	0f 2e       	mov	r0, r31
 302:	f4 ef       	ldi	r31, 0xF4	; 244
 304:	af 2e       	mov	r10, r31
 306:	f0 2d       	mov	r31, r0
 308:	bb 24       	eor	r11, r11
 30a:	b3 94       	inc	r11
 30c:	c1 2c       	mov	r12, r1
 30e:	d1 2c       	mov	r13, r1
 310:	e1 2c       	mov	r14, r1
 312:	f1 2c       	mov	r15, r1
 314:	00 e0       	ldi	r16, 0x00	; 0
 316:	10 e0       	ldi	r17, 0x00	; 0
 318:	22 2d       	mov	r18, r2
 31a:	33 2d       	mov	r19, r3
 31c:	44 2d       	mov	r20, r4
 31e:	55 2d       	mov	r21, r5
 320:	66 2d       	mov	r22, r6
 322:	77 2d       	mov	r23, r7
 324:	88 2d       	mov	r24, r8
 326:	99 2d       	mov	r25, r9
 328:	18 d1       	rcall	.+560    	; 0x55a <__umoddi3>
 32a:	22 2e       	mov	r2, r18
 32c:	33 2e       	mov	r3, r19
 32e:	44 2e       	mov	r4, r20
 330:	55 2e       	mov	r5, r21
 332:	66 2e       	mov	r6, r22
 334:	77 2e       	mov	r7, r23
 336:	88 2e       	mov	r8, r24
 338:	99 2e       	mov	r9, r25
 33a:	a2 2c       	mov	r10, r2
 33c:	b3 2c       	mov	r11, r3
 33e:	c4 2c       	mov	r12, r4
 340:	d5 2c       	mov	r13, r5
 342:	e6 2c       	mov	r14, r6
 344:	f7 2c       	mov	r15, r7
 346:	08 2d       	mov	r16, r8
 348:	19 2d       	mov	r17, r9
 34a:	2a 2d       	mov	r18, r10
 34c:	3b 2d       	mov	r19, r11
 34e:	4c 2d       	mov	r20, r12
 350:	5d 2d       	mov	r21, r13
 352:	6e 2d       	mov	r22, r14
 354:	7f 2d       	mov	r23, r15
 356:	80 2f       	mov	r24, r16
 358:	91 2f       	mov	r25, r17
 35a:	a0 e0       	ldi	r26, 0x00	; 0
 35c:	68 d1       	rcall	.+720    	; 0x62e <__cmpdi2_s8>
 35e:	99 f4       	brne	.+38     	; 0x386 <main+0x11c>
 360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
		{
			if( (threeLEDs & 0x08) == (0x08))// blinkLED FINITE STATE MACHINE
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	88 70       	andi	r24, 0x08	; 8
 36a:	99 27       	eor	r25, r25
 36c:	89 2b       	or	r24, r25
 36e:	31 f0       	breq	.+12     	; 0x37c <main+0x112>
 370:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
				threeLEDs = threeLEDs - 0x08;			
 374:	88 50       	subi	r24, 0x08	; 8
 376:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <threeLEDs>
 37a:	05 c0       	rjmp	.+10     	; 0x386 <main+0x11c>
 37c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
			else
				threeLEDs = threeLEDs + 0x08;//end of blinkLED FSM
 380:	88 5f       	subi	r24, 0xF8	; 248
 382:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <threeLEDs>
 386:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
		}
			
		temp = threeLEDs;// used for storage of the bit 3
 38a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <temp>
 38e:	20 90 0d 01 	lds	r2, 0x010D	; 0x80010d <counterWithLove>
		
		if(counterWithLove %150 == 0)//blinks once every 300 ms
 392:	30 90 0e 01 	lds	r3, 0x010E	; 0x80010e <counterWithLove+0x1>
 396:	40 90 0f 01 	lds	r4, 0x010F	; 0x80010f <counterWithLove+0x2>
 39a:	50 90 10 01 	lds	r5, 0x0110	; 0x800110 <counterWithLove+0x3>
 39e:	60 90 11 01 	lds	r6, 0x0111	; 0x800111 <counterWithLove+0x4>
 3a2:	70 90 12 01 	lds	r7, 0x0112	; 0x800112 <counterWithLove+0x5>
 3a6:	80 90 13 01 	lds	r8, 0x0113	; 0x800113 <counterWithLove+0x6>
 3aa:	90 90 14 01 	lds	r9, 0x0114	; 0x800114 <counterWithLove+0x7>
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f6 e9       	ldi	r31, 0x96	; 150
 3b2:	af 2e       	mov	r10, r31
 3b4:	f0 2d       	mov	r31, r0
 3b6:	b1 2c       	mov	r11, r1
 3b8:	c1 2c       	mov	r12, r1
 3ba:	d1 2c       	mov	r13, r1
 3bc:	e1 2c       	mov	r14, r1
 3be:	f1 2c       	mov	r15, r1
 3c0:	00 e0       	ldi	r16, 0x00	; 0
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	22 2d       	mov	r18, r2
 3c6:	33 2d       	mov	r19, r3
 3c8:	44 2d       	mov	r20, r4
 3ca:	55 2d       	mov	r21, r5
 3cc:	66 2d       	mov	r22, r6
 3ce:	77 2d       	mov	r23, r7
 3d0:	88 2d       	mov	r24, r8
 3d2:	99 2d       	mov	r25, r9
 3d4:	c2 d0       	rcall	.+388    	; 0x55a <__umoddi3>
 3d6:	22 2e       	mov	r2, r18
 3d8:	33 2e       	mov	r3, r19
 3da:	44 2e       	mov	r4, r20
 3dc:	55 2e       	mov	r5, r21
 3de:	66 2e       	mov	r6, r22
 3e0:	77 2e       	mov	r7, r23
 3e2:	88 2e       	mov	r8, r24
 3e4:	99 2e       	mov	r9, r25
 3e6:	a2 2c       	mov	r10, r2
 3e8:	b3 2c       	mov	r11, r3
 3ea:	c4 2c       	mov	r12, r4
 3ec:	d5 2c       	mov	r13, r5
 3ee:	e6 2c       	mov	r14, r6
 3f0:	f7 2c       	mov	r15, r7
 3f2:	08 2d       	mov	r16, r8
 3f4:	19 2d       	mov	r17, r9
 3f6:	2a 2d       	mov	r18, r10
 3f8:	3b 2d       	mov	r19, r11
 3fa:	4c 2d       	mov	r20, r12
 3fc:	5d 2d       	mov	r21, r13
 3fe:	6e 2d       	mov	r22, r14
 400:	7f 2d       	mov	r23, r15
 402:	80 2f       	mov	r24, r16
 404:	91 2f       	mov	r25, r17
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	12 d1       	rcall	.+548    	; 0x62e <__cmpdi2_s8>
 40a:	e9 f4       	brne	.+58     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 40c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
		{
			if( (threeLEDs & 0x04) == (0x04) )//threeLED's FMS
 410:	88 2f       	mov	r24, r24
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	84 70       	andi	r24, 0x04	; 4
 416:	99 27       	eor	r25, r25
 418:	89 2b       	or	r24, r25
 41a:	39 f0       	breq	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
				threeLEDs = (threeLEDs & 0x08) + 0x01;
 420:	88 70       	andi	r24, 0x08	; 8
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <threeLEDs>
 428:	0e c0       	rjmp	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 42a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
			else
				threeLEDs =  ( (threeLEDs << 1) | (temp & 0x08) ) & 0x0F;// end of threeLED's FMS
 42e:	88 2f       	mov	r24, r24
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	98 2f       	mov	r25, r24
 438:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temp>
 43c:	88 70       	andi	r24, 0x08	; 8
 43e:	89 2b       	or	r24, r25
 440:	8f 70       	andi	r24, 0x0F	; 15
 442:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <threeLEDs>
 446:	80 e2       	ldi	r24, 0x20	; 32
		}
		
		if( (~PINA & 0x01) == (0x01) )// plays when a button is pressed
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	80 81       	ld	r24, Z
 44e:	88 2f       	mov	r24, r24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	81 70       	andi	r24, 0x01	; 1
 454:	99 27       	eor	r25, r25
 456:	89 2b       	or	r24, r25
 458:	09 f0       	breq	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	3e c0       	rjmp	.+124    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 45c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <counterWithLove>
		{
			//for(unsigned  = i)
			if(counterWithLove %2 == 0)// set the speaker to change every two cycles
 460:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <counterWithLove+0x1>
 464:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <counterWithLove+0x2>
 468:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <counterWithLove+0x3>
 46c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <counterWithLove+0x4>
 470:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <counterWithLove+0x5>
 474:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <counterWithLove+0x6>
 478:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <counterWithLove+0x7>
 47c:	f2 2f       	mov	r31, r18
 47e:	f1 70       	andi	r31, 0x01	; 1
 480:	f9 83       	std	Y+1, r31	; 0x01
 482:	e3 2f       	mov	r30, r19
 484:	e0 70       	andi	r30, 0x00	; 0
 486:	ea 83       	std	Y+2, r30	; 0x02
 488:	f4 2f       	mov	r31, r20
 48a:	f0 70       	andi	r31, 0x00	; 0
 48c:	fb 83       	std	Y+3, r31	; 0x03
 48e:	e5 2f       	mov	r30, r21
 490:	e0 70       	andi	r30, 0x00	; 0
 492:	ec 83       	std	Y+4, r30	; 0x04
 494:	f6 2f       	mov	r31, r22
 496:	f0 70       	andi	r31, 0x00	; 0
 498:	fd 83       	std	Y+5, r31	; 0x05
 49a:	e7 2f       	mov	r30, r23
 49c:	e0 70       	andi	r30, 0x00	; 0
 49e:	ee 83       	std	Y+6, r30	; 0x06
 4a0:	f8 2f       	mov	r31, r24
 4a2:	f0 70       	andi	r31, 0x00	; 0
 4a4:	ff 83       	std	Y+7, r31	; 0x07
 4a6:	e9 2f       	mov	r30, r25
 4a8:	e0 70       	andi	r30, 0x00	; 0
 4aa:	e8 87       	std	Y+8, r30	; 0x08
 4ac:	29 81       	ldd	r18, Y+1	; 0x01
 4ae:	3a 81       	ldd	r19, Y+2	; 0x02
 4b0:	4b 81       	ldd	r20, Y+3	; 0x03
 4b2:	5c 81       	ldd	r21, Y+4	; 0x04
 4b4:	6d 81       	ldd	r22, Y+5	; 0x05
 4b6:	7e 81       	ldd	r23, Y+6	; 0x06
 4b8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ba:	98 85       	ldd	r25, Y+8	; 0x08
 4bc:	a0 e0       	ldi	r26, 0x00	; 0
 4be:	b7 d0       	rcall	.+366    	; 0x62e <__cmpdi2_s8>
 4c0:	31 f4       	brne	.+12     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
				threeLEDs = (threeLEDs) | (0x80);
 4c6:	80 68       	ori	r24, 0x80	; 128
 4c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <threeLEDs>
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threeLEDs>
			else
				threeLEDs = (threeLEDs & 0x0F);
 4d2:	8f 70       	andi	r24, 0x0F	; 15
 4d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <threeLEDs>
 4d8:	88 e2       	ldi	r24, 0x28	; 40
		}
			
			
		PORTC = threeLEDs & 0x8F;//sets the output
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <threeLEDs>
 4e0:	2f 78       	andi	r18, 0x8F	; 143
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
 4e6:	00 00       	nop
		
		while(!TimerFlag){}//waits for 100 ms
 4e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 4ec:	88 23       	and	r24, r24
 4ee:	e1 f3       	breq	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4f0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		TimerFlag = 0;// I LOVE RODGER!!!
 4f4:	a0 90 0d 01 	lds	r10, 0x010D	; 0x80010d <counterWithLove>
		
		counterWithLove++;
 4f8:	b0 90 0e 01 	lds	r11, 0x010E	; 0x80010e <counterWithLove+0x1>
 4fc:	c0 90 0f 01 	lds	r12, 0x010F	; 0x80010f <counterWithLove+0x2>
 500:	d0 90 10 01 	lds	r13, 0x0110	; 0x800110 <counterWithLove+0x3>
 504:	e0 90 11 01 	lds	r14, 0x0111	; 0x800111 <counterWithLove+0x4>
 508:	f0 90 12 01 	lds	r15, 0x0112	; 0x800112 <counterWithLove+0x5>
 50c:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <counterWithLove+0x6>
 510:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <counterWithLove+0x7>
 514:	2a 2d       	mov	r18, r10
 516:	3b 2d       	mov	r19, r11
 518:	4c 2d       	mov	r20, r12
 51a:	5d 2d       	mov	r21, r13
 51c:	6e 2d       	mov	r22, r14
 51e:	7f 2d       	mov	r23, r15
 520:	80 2f       	mov	r24, r16
 522:	91 2f       	mov	r25, r17
 524:	a1 e0       	ldi	r26, 0x01	; 1
 526:	77 d0       	rcall	.+238    	; 0x616 <__adddi3_s8>
 528:	a2 2e       	mov	r10, r18
 52a:	b3 2e       	mov	r11, r19
 52c:	c4 2e       	mov	r12, r20
 52e:	d5 2e       	mov	r13, r21
 530:	e6 2e       	mov	r14, r22
 532:	f7 2e       	mov	r15, r23
 534:	08 2f       	mov	r16, r24
 536:	19 2f       	mov	r17, r25
 538:	a0 92 0d 01 	sts	0x010D, r10	; 0x80010d <counterWithLove>
 53c:	b0 92 0e 01 	sts	0x010E, r11	; 0x80010e <counterWithLove+0x1>
 540:	c0 92 0f 01 	sts	0x010F, r12	; 0x80010f <counterWithLove+0x2>
 544:	d0 92 10 01 	sts	0x0110, r13	; 0x800110 <counterWithLove+0x3>
 548:	e0 92 11 01 	sts	0x0111, r14	; 0x800111 <counterWithLove+0x4>
 54c:	f0 92 12 01 	sts	0x0112, r15	; 0x800112 <counterWithLove+0x5>
 550:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <counterWithLove+0x6>
 554:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <counterWithLove+0x7>
 558:	c3 ce       	rjmp	.-634    	; 0x2e0 <main+0x76>

0000055a <__umoddi3>:
		
	}
 55a:	68 94       	set
 55c:	01 c0       	rjmp	.+2      	; 0x560 <__udivdi3_umoddi3>

0000055e <__udivdi3>:
 55e:	e8 94       	clt

00000560 <__udivdi3_umoddi3>:
 560:	8f 92       	push	r8
 562:	9f 92       	push	r9
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	05 d0       	rcall	.+10     	; 0x574 <__udivmod64>
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	9f 90       	pop	r9
 570:	8f 90       	pop	r8
 572:	08 95       	ret

00000574 <__udivmod64>:
 574:	88 24       	eor	r8, r8
 576:	99 24       	eor	r9, r9
 578:	f4 01       	movw	r30, r8
 57a:	e4 01       	movw	r28, r8
 57c:	b0 e4       	ldi	r27, 0x40	; 64
 57e:	9f 93       	push	r25
 580:	aa 27       	eor	r26, r26
 582:	9a 15       	cp	r25, r10
 584:	8b 04       	cpc	r8, r11
 586:	9c 04       	cpc	r9, r12
 588:	ed 05       	cpc	r30, r13
 58a:	fe 05       	cpc	r31, r14
 58c:	cf 05       	cpc	r28, r15
 58e:	d0 07       	cpc	r29, r16
 590:	a1 07       	cpc	r26, r17
 592:	98 f4       	brcc	.+38     	; 0x5ba <__udivmod64+0x46>
 594:	ad 2f       	mov	r26, r29
 596:	dc 2f       	mov	r29, r28
 598:	cf 2f       	mov	r28, r31
 59a:	fe 2f       	mov	r31, r30
 59c:	e9 2d       	mov	r30, r9
 59e:	98 2c       	mov	r9, r8
 5a0:	89 2e       	mov	r8, r25
 5a2:	98 2f       	mov	r25, r24
 5a4:	87 2f       	mov	r24, r23
 5a6:	76 2f       	mov	r23, r22
 5a8:	65 2f       	mov	r22, r21
 5aa:	54 2f       	mov	r21, r20
 5ac:	43 2f       	mov	r20, r19
 5ae:	32 2f       	mov	r19, r18
 5b0:	22 27       	eor	r18, r18
 5b2:	b8 50       	subi	r27, 0x08	; 8
 5b4:	31 f7       	brne	.-52     	; 0x582 <__udivmod64+0xe>
 5b6:	bf 91       	pop	r27
 5b8:	27 c0       	rjmp	.+78     	; 0x608 <__udivmod64+0x94>
 5ba:	1b 2e       	mov	r1, r27
 5bc:	bf 91       	pop	r27
 5be:	bb 27       	eor	r27, r27
 5c0:	22 0f       	add	r18, r18
 5c2:	33 1f       	adc	r19, r19
 5c4:	44 1f       	adc	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	66 1f       	adc	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	88 1c       	adc	r8, r8
 5d2:	99 1c       	adc	r9, r9
 5d4:	ee 1f       	adc	r30, r30
 5d6:	ff 1f       	adc	r31, r31
 5d8:	cc 1f       	adc	r28, r28
 5da:	dd 1f       	adc	r29, r29
 5dc:	aa 1f       	adc	r26, r26
 5de:	bb 1f       	adc	r27, r27
 5e0:	8a 14       	cp	r8, r10
 5e2:	9b 04       	cpc	r9, r11
 5e4:	ec 05       	cpc	r30, r12
 5e6:	fd 05       	cpc	r31, r13
 5e8:	ce 05       	cpc	r28, r14
 5ea:	df 05       	cpc	r29, r15
 5ec:	a0 07       	cpc	r26, r16
 5ee:	b1 07       	cpc	r27, r17
 5f0:	48 f0       	brcs	.+18     	; 0x604 <__udivmod64+0x90>
 5f2:	8a 18       	sub	r8, r10
 5f4:	9b 08       	sbc	r9, r11
 5f6:	ec 09       	sbc	r30, r12
 5f8:	fd 09       	sbc	r31, r13
 5fa:	ce 09       	sbc	r28, r14
 5fc:	df 09       	sbc	r29, r15
 5fe:	a0 0b       	sbc	r26, r16
 600:	b1 0b       	sbc	r27, r17
 602:	21 60       	ori	r18, 0x01	; 1
 604:	1a 94       	dec	r1
 606:	e1 f6       	brne	.-72     	; 0x5c0 <__udivmod64+0x4c>
 608:	2e f4       	brtc	.+10     	; 0x614 <__udivmod64+0xa0>
 60a:	94 01       	movw	r18, r8
 60c:	af 01       	movw	r20, r30
 60e:	be 01       	movw	r22, r28
 610:	cd 01       	movw	r24, r26
 612:	00 0c       	add	r0, r0
 614:	08 95       	ret

00000616 <__adddi3_s8>:
 616:	00 24       	eor	r0, r0
 618:	a7 fd       	sbrc	r26, 7
 61a:	00 94       	com	r0
 61c:	2a 0f       	add	r18, r26
 61e:	30 1d       	adc	r19, r0
 620:	40 1d       	adc	r20, r0
 622:	50 1d       	adc	r21, r0
 624:	60 1d       	adc	r22, r0
 626:	70 1d       	adc	r23, r0
 628:	80 1d       	adc	r24, r0
 62a:	90 1d       	adc	r25, r0
 62c:	08 95       	ret

0000062e <__cmpdi2_s8>:
 62e:	00 24       	eor	r0, r0
 630:	a7 fd       	sbrc	r26, 7
 632:	00 94       	com	r0
 634:	2a 17       	cp	r18, r26
 636:	30 05       	cpc	r19, r0
 638:	40 05       	cpc	r20, r0
 63a:	50 05       	cpc	r21, r0
 63c:	60 05       	cpc	r22, r0
 63e:	70 05       	cpc	r23, r0
 640:	80 05       	cpc	r24, r0
 642:	90 05       	cpc	r25, r0
 644:	08 95       	ret

00000646 <_exit>:
 646:	f8 94       	cli

00000648 <__stop_program>:
 648:	ff cf       	rjmp	.-2      	; 0x648 <__stop_program>
