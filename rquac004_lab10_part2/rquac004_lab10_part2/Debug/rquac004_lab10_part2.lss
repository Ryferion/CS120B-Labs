
rquac004_lab10_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003c2  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800106  00800106  0000045c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000975  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000844  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000325  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	73 d0       	rcall	.+230    	; 0x1aa <main>
  c4:	7c c1       	rjmp	.+760    	; 0x3be <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
  ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
  f0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
  f4:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
  f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
  fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 100:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 104:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 126:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 12a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 12e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 13c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 140:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 144:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 15a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 15e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 162:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 166:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 16a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 16e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 172:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 18c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 194:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 19c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 1a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 1a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
 1a8:	08 95       	ret

000001aa <main>:
volatile unsigned char flag;
unsigned long long int counterWithLove;// love is always the answer. NO QUESTION

int main(void)
{
	DDRA = 0x00; PINA = 0xFF; // input for A
 1aa:	11 b8       	out	0x01, r1	; 1
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	80 b9       	out	0x00, r24	; 0
	DDRC = 0xFF; PORTC = 0x00; // output for C
 1b0:	87 b9       	out	0x07, r24	; 7
 1b2:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;//output for D
 1b4:	8a b9       	out	0x0a, r24	; 10
 1b6:	1b b8       	out	0x0b, r1	; 11
	
	TimerSet(100); // sets timer to go every 100 ms;
 1b8:	64 e6       	ldi	r22, 0x64	; 100
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	e3 df       	rcall	.-58     	; 0x188 <TimerSet>
	TimerOn();
 1c2:	82 df       	rcall	.-252    	; 0xc8 <TimerOn>
 1c4:	30 90 0d 01 	lds	r3, 0x010D	; 0x80010d <counterWithLove>
	
	
    while (1) //ONE Mealy state machine so no need for switch statements
    {
	
		if(counterWithLove %10 == 0)// blinks one every second
 1c8:	40 90 0e 01 	lds	r4, 0x010E	; 0x80010e <counterWithLove+0x1>
 1cc:	50 90 0f 01 	lds	r5, 0x010F	; 0x80010f <counterWithLove+0x2>
 1d0:	60 90 10 01 	lds	r6, 0x0110	; 0x800110 <counterWithLove+0x3>
 1d4:	70 90 11 01 	lds	r7, 0x0111	; 0x800111 <counterWithLove+0x4>
 1d8:	80 90 12 01 	lds	r8, 0x0112	; 0x800112 <counterWithLove+0x5>
 1dc:	90 90 13 01 	lds	r9, 0x0113	; 0x800113 <counterWithLove+0x6>
 1e0:	d0 91 14 01 	lds	r29, 0x0114	; 0x800114 <counterWithLove+0x7>
 1e4:	0f 2e       	mov	r0, r31
 1e6:	fa e0       	ldi	r31, 0x0A	; 10
 1e8:	af 2e       	mov	r10, r31
 1ea:	f0 2d       	mov	r31, r0
 1ec:	b1 2c       	mov	r11, r1
 1ee:	c1 2c       	mov	r12, r1
 1f0:	d1 2c       	mov	r13, r1
 1f2:	e1 2c       	mov	r14, r1
 1f4:	f1 2c       	mov	r15, r1
 1f6:	00 e0       	ldi	r16, 0x00	; 0
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	23 2d       	mov	r18, r3
 1fc:	34 2d       	mov	r19, r4
 1fe:	45 2d       	mov	r20, r5
 200:	56 2d       	mov	r21, r6
 202:	67 2d       	mov	r22, r7
 204:	78 2d       	mov	r23, r8
 206:	89 2d       	mov	r24, r9
 208:	9d 2f       	mov	r25, r29
 20a:	63 d0       	rcall	.+198    	; 0x2d2 <__umoddi3>
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	cb d0       	rcall	.+406    	; 0x3a6 <__cmpdi2_s8>
 210:	59 f4       	brne	.+22     	; 0x228 <main+0x7e>
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		{
			if( (threeLEDs & 0x08) == (0x08))// blinkLED FINITE STATE MACHINE
 216:	83 ff       	sbrs	r24, 3
 218:	04 c0       	rjmp	.+8      	; 0x222 <main+0x78>
 21a:	88 50       	subi	r24, 0x08	; 8
				threeLEDs = threeLEDs - 0x08;			
 21c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 220:	03 c0       	rjmp	.+6      	; 0x228 <main+0x7e>
 222:	88 5f       	subi	r24, 0xF8	; 248
			else
				threeLEDs = threeLEDs + 0x08;//end of blinkLED FSM
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 228:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
		}
			
		temp = threeLEDs;// used for storage of the bit 3
 22c:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <temp>
 230:	0f 2e       	mov	r0, r31
		
		if(counterWithLove %3 == 0)//blinks once every 300 ms
 232:	f3 e0       	ldi	r31, 0x03	; 3
 234:	af 2e       	mov	r10, r31
 236:	f0 2d       	mov	r31, r0
 238:	b1 2c       	mov	r11, r1
 23a:	c1 2c       	mov	r12, r1
 23c:	d1 2c       	mov	r13, r1
 23e:	e1 2c       	mov	r14, r1
 240:	f1 2c       	mov	r15, r1
 242:	00 e0       	ldi	r16, 0x00	; 0
 244:	10 e0       	ldi	r17, 0x00	; 0
 246:	23 2d       	mov	r18, r3
 248:	34 2d       	mov	r19, r4
 24a:	45 2d       	mov	r20, r5
 24c:	56 2d       	mov	r21, r6
 24e:	67 2d       	mov	r22, r7
 250:	78 2d       	mov	r23, r8
 252:	89 2d       	mov	r24, r9
 254:	9d 2f       	mov	r25, r29
 256:	3d d0       	rcall	.+122    	; 0x2d2 <__umoddi3>
 258:	a0 e0       	ldi	r26, 0x00	; 0
 25a:	a5 d0       	rcall	.+330    	; 0x3a6 <__cmpdi2_s8>
 25c:	69 f4       	brne	.+26     	; 0x278 <main+0xce>
 25e:	c2 ff       	sbrs	r28, 2
		{
			if( (threeLEDs & 0x04) == (0x04) )//threeLED's FMS
 260:	05 c0       	rjmp	.+10     	; 0x26c <main+0xc2>
 262:	c8 70       	andi	r28, 0x08	; 8
				threeLEDs = (threeLEDs & 0x08) + 0x01;
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 26a:	06 c0       	rjmp	.+12     	; 0x278 <main+0xce>
 26c:	8c 2f       	mov	r24, r28
			else
				threeLEDs = (threeLEDs << 1) | (temp & 0x08);// last 4 bits are in error state. does not matter
 26e:	88 0f       	add	r24, r24
 270:	c8 70       	andi	r28, 0x08	; 8
 272:	c8 2b       	or	r28, r24
 274:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		}
		
		PORTC = threeLEDs & 0x0F;//sets the output
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	88 b9       	out	0x08, r24	; 8
 280:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
		
		while(!TimerFlag){}//waits for 100 ms
 284:	88 23       	and	r24, r24
 286:	e1 f3       	breq	.-8      	; 0x280 <main+0xd6>
 288:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
		TimerFlag = 0;// I LOVE RODGER!!!
 28c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <counterWithLove>
		
		counterWithLove++;
 290:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <counterWithLove+0x1>
 294:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <counterWithLove+0x2>
 298:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <counterWithLove+0x3>
 29c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <counterWithLove+0x4>
 2a0:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <counterWithLove+0x5>
 2a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <counterWithLove+0x6>
 2a8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <counterWithLove+0x7>
 2ac:	a1 e0       	ldi	r26, 0x01	; 1
 2ae:	6f d0       	rcall	.+222    	; 0x38e <__adddi3_s8>
 2b0:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <counterWithLove>
 2b4:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <counterWithLove+0x1>
 2b8:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <counterWithLove+0x2>
 2bc:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <counterWithLove+0x3>
 2c0:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <counterWithLove+0x4>
 2c4:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <counterWithLove+0x5>
 2c8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <counterWithLove+0x6>
 2cc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <counterWithLove+0x7>
 2d0:	79 cf       	rjmp	.-270    	; 0x1c4 <main+0x1a>

000002d2 <__umoddi3>:
		
	}
 2d2:	68 94       	set
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <__udivdi3_umoddi3>

000002d6 <__udivdi3>:
 2d6:	e8 94       	clt

000002d8 <__udivdi3_umoddi3>:
 2d8:	8f 92       	push	r8
 2da:	9f 92       	push	r9
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	05 d0       	rcall	.+10     	; 0x2ec <__udivmod64>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	08 95       	ret

000002ec <__udivmod64>:
 2ec:	88 24       	eor	r8, r8
 2ee:	99 24       	eor	r9, r9
 2f0:	f4 01       	movw	r30, r8
 2f2:	e4 01       	movw	r28, r8
 2f4:	b0 e4       	ldi	r27, 0x40	; 64
 2f6:	9f 93       	push	r25
 2f8:	aa 27       	eor	r26, r26
 2fa:	9a 15       	cp	r25, r10
 2fc:	8b 04       	cpc	r8, r11
 2fe:	9c 04       	cpc	r9, r12
 300:	ed 05       	cpc	r30, r13
 302:	fe 05       	cpc	r31, r14
 304:	cf 05       	cpc	r28, r15
 306:	d0 07       	cpc	r29, r16
 308:	a1 07       	cpc	r26, r17
 30a:	98 f4       	brcc	.+38     	; 0x332 <__udivmod64+0x46>
 30c:	ad 2f       	mov	r26, r29
 30e:	dc 2f       	mov	r29, r28
 310:	cf 2f       	mov	r28, r31
 312:	fe 2f       	mov	r31, r30
 314:	e9 2d       	mov	r30, r9
 316:	98 2c       	mov	r9, r8
 318:	89 2e       	mov	r8, r25
 31a:	98 2f       	mov	r25, r24
 31c:	87 2f       	mov	r24, r23
 31e:	76 2f       	mov	r23, r22
 320:	65 2f       	mov	r22, r21
 322:	54 2f       	mov	r21, r20
 324:	43 2f       	mov	r20, r19
 326:	32 2f       	mov	r19, r18
 328:	22 27       	eor	r18, r18
 32a:	b8 50       	subi	r27, 0x08	; 8
 32c:	31 f7       	brne	.-52     	; 0x2fa <__udivmod64+0xe>
 32e:	bf 91       	pop	r27
 330:	27 c0       	rjmp	.+78     	; 0x380 <__udivmod64+0x94>
 332:	1b 2e       	mov	r1, r27
 334:	bf 91       	pop	r27
 336:	bb 27       	eor	r27, r27
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	44 1f       	adc	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	66 1f       	adc	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	88 1f       	adc	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 1c       	adc	r8, r8
 34a:	99 1c       	adc	r9, r9
 34c:	ee 1f       	adc	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	cc 1f       	adc	r28, r28
 352:	dd 1f       	adc	r29, r29
 354:	aa 1f       	adc	r26, r26
 356:	bb 1f       	adc	r27, r27
 358:	8a 14       	cp	r8, r10
 35a:	9b 04       	cpc	r9, r11
 35c:	ec 05       	cpc	r30, r12
 35e:	fd 05       	cpc	r31, r13
 360:	ce 05       	cpc	r28, r14
 362:	df 05       	cpc	r29, r15
 364:	a0 07       	cpc	r26, r16
 366:	b1 07       	cpc	r27, r17
 368:	48 f0       	brcs	.+18     	; 0x37c <__udivmod64+0x90>
 36a:	8a 18       	sub	r8, r10
 36c:	9b 08       	sbc	r9, r11
 36e:	ec 09       	sbc	r30, r12
 370:	fd 09       	sbc	r31, r13
 372:	ce 09       	sbc	r28, r14
 374:	df 09       	sbc	r29, r15
 376:	a0 0b       	sbc	r26, r16
 378:	b1 0b       	sbc	r27, r17
 37a:	21 60       	ori	r18, 0x01	; 1
 37c:	1a 94       	dec	r1
 37e:	e1 f6       	brne	.-72     	; 0x338 <__udivmod64+0x4c>
 380:	2e f4       	brtc	.+10     	; 0x38c <__udivmod64+0xa0>
 382:	94 01       	movw	r18, r8
 384:	af 01       	movw	r20, r30
 386:	be 01       	movw	r22, r28
 388:	cd 01       	movw	r24, r26
 38a:	00 0c       	add	r0, r0
 38c:	08 95       	ret

0000038e <__adddi3_s8>:
 38e:	00 24       	eor	r0, r0
 390:	a7 fd       	sbrc	r26, 7
 392:	00 94       	com	r0
 394:	2a 0f       	add	r18, r26
 396:	30 1d       	adc	r19, r0
 398:	40 1d       	adc	r20, r0
 39a:	50 1d       	adc	r21, r0
 39c:	60 1d       	adc	r22, r0
 39e:	70 1d       	adc	r23, r0
 3a0:	80 1d       	adc	r24, r0
 3a2:	90 1d       	adc	r25, r0
 3a4:	08 95       	ret

000003a6 <__cmpdi2_s8>:
 3a6:	00 24       	eor	r0, r0
 3a8:	a7 fd       	sbrc	r26, 7
 3aa:	00 94       	com	r0
 3ac:	2a 17       	cp	r18, r26
 3ae:	30 05       	cpc	r19, r0
 3b0:	40 05       	cpc	r20, r0
 3b2:	50 05       	cpc	r21, r0
 3b4:	60 05       	cpc	r22, r0
 3b6:	70 05       	cpc	r23, r0
 3b8:	80 05       	cpc	r24, r0
 3ba:	90 05       	cpc	r25, r0
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
