
rquac004_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b4  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  00001321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	5d d0       	rcall	.+186    	; 0x164 <main>
  aa:	71 c0       	rjmp	.+226    	; 0x18e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <toggle>:
unsigned char hold = 0x00;
unsigned char hold1 = 0x00;
unsigned char count = 0x00;

void toggle() {
	switch (state){//transition
  ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	b1 f1       	breq	.+108    	; 0x122 <toggle+0x74>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <toggle+0x14>
  b8:	88 23       	and	r24, r24
  ba:	49 f0       	breq	.+18     	; 0xce <toggle+0x20>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	59 f0       	breq	.+22     	; 0xd6 <toggle+0x28>
  c0:	4d c0       	rjmp	.+154    	; 0x15c <toggle+0xae>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	d1 f1       	breq	.+116    	; 0x13a <toggle+0x8c>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	09 f4       	brne	.+2      	; 0xcc <toggle+0x1e>
  ca:	41 c0       	rjmp	.+130    	; 0x14e <toggle+0xa0>
  cc:	47 c0       	rjmp	.+142    	; 0x15c <toggle+0xae>
		case Start:
			state = WaitPress;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
  d4:	08 95       	ret
		case WaitPress:
			if ((hold == 0x00) && (hold1 == 0x00)){
  d6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <hold>
  da:	91 11       	cpse	r25, r1
  dc:	06 c0       	rjmp	.+12     	; 0xea <toggle+0x3c>
  de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
  e2:	81 11       	cpse	r24, r1
  e4:	02 c0       	rjmp	.+4      	; 0xea <toggle+0x3c>
				state = Start;
  e6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			}
			while ((hold == (PINA & 0x01)) && (hold1 == (PINA & 0x02))){
  ea:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <hold1>
				}
				else if (hold != 0x00){
					state = PressOne;
				}
				else if (hold1 != 0x00) {
					state = PressTwo;
  ee:	53 e0       	ldi	r21, 0x03	; 3
			while ((hold == (PINA & 0x01)) && (hold1 == (PINA & 0x02))){
				if ((hold != 0x00) && (hold1 != 0x00)){
					state = PressBoth;
				}
				else if (hold != 0x00){
					state = PressOne;
  f0:	32 e0       	ldi	r19, 0x02	; 2
			if ((hold == 0x00) && (hold1 == 0x00)){
				state = Start;
			}
			while ((hold == (PINA & 0x01)) && (hold1 == (PINA & 0x02))){
				if ((hold != 0x00) && (hold1 != 0x00)){
					state = PressBoth;
  f2:	44 e0       	ldi	r20, 0x04	; 4
  f4:	0d c0       	rjmp	.+26     	; 0x110 <toggle+0x62>
		case WaitPress:
			if ((hold == 0x00) && (hold1 == 0x00)){
				state = Start;
			}
			while ((hold == (PINA & 0x01)) && (hold1 == (PINA & 0x02))){
				if ((hold != 0x00) && (hold1 != 0x00)){
  f6:	99 23       	and	r25, r25
  f8:	41 f0       	breq	.+16     	; 0x10a <toggle+0x5c>
  fa:	22 23       	and	r18, r18
  fc:	19 f0       	breq	.+6      	; 0x104 <toggle+0x56>
					state = PressBoth;
  fe:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <state>
 102:	06 c0       	rjmp	.+12     	; 0x110 <toggle+0x62>
				}
				else if (hold != 0x00){
					state = PressOne;
 104:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <state>
 108:	03 c0       	rjmp	.+6      	; 0x110 <toggle+0x62>
				}
				else if (hold1 != 0x00) {
 10a:	21 11       	cpse	r18, r1
					state = PressTwo;
 10c:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <state>
			break;
		case WaitPress:
			if ((hold == 0x00) && (hold1 == 0x00)){
				state = Start;
			}
			while ((hold == (PINA & 0x01)) && (hold1 == (PINA & 0x02))){
 110:	80 b1       	in	r24, 0x00	; 0
 112:	81 70       	andi	r24, 0x01	; 1
 114:	98 13       	cpse	r25, r24
 116:	25 c0       	rjmp	.+74     	; 0x162 <toggle+0xb4>
 118:	80 b1       	in	r24, 0x00	; 0
 11a:	82 70       	andi	r24, 0x02	; 2
 11c:	82 17       	cp	r24, r18
 11e:	59 f3       	breq	.-42     	; 0xf6 <toggle+0x48>
 120:	08 95       	ret
					state = PressBoth;
				}
			}
			break;
		case PressOne:
			if (count < 9){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	89 30       	cpi	r24, 0x09	; 9
 128:	20 f4       	brcc	.+8      	; 0x132 <toggle+0x84>
				count = count + 1;
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				PORTC = count;
 130:	88 b9       	out	0x08, r24	; 8
			}
			state = WaitPress;	
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 138:	08 95       	ret
		case PressTwo:
			if (count >= 0){
				count = count - 1;
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				PORTC = count;
 144:	88 b9       	out	0x08, r24	; 8
			}
			state = WaitPress;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 14c:	08 95       	ret
		case PressBoth:
			count = 0;
 14e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTC = count;
 152:	18 b8       	out	0x08, r1	; 8
			state = WaitPress;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 15a:	08 95       	ret
		default:
			state = WaitPress;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 162:	08 95       	ret

00000164 <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // config
 164:	11 b8       	out	0x01, r1	; 1
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // config
 16a:	84 b9       	out	0x04, r24	; 4
 16c:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // config
 16e:	87 b9       	out	0x07, r24	; 7
 170:	18 b8       	out	0x08, r1	; 8
		count = 7;
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTC = 7;
 178:	88 b9       	out	0x08, r24	; 8

	while (1) 
    {
		    	hold = PINA & 0x01;
 17a:	80 b1       	in	r24, 0x00	; 0
 17c:	81 70       	andi	r24, 0x01	; 1
 17e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hold>
		hold1 = PINA & 0x02;
 182:	80 b1       	in	r24, 0x00	; 0
 184:	82 70       	andi	r24, 0x02	; 2
 186:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hold1>
		toggle();
 18a:	91 df       	rcall	.-222    	; 0xae <toggle>
 18c:	f6 cf       	rjmp	.-20     	; 0x17a <main+0x16>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
