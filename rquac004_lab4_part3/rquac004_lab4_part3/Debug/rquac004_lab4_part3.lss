
rquac004_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008db  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043d  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001e8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	26 d1       	rcall	.+588    	; 0x2f6 <main>
  aa:	68 c1       	rjmp	.+720    	; 0x37c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <toggle>:
unsigned char hold1 = 0x00;
unsigned char hold2 = 0x00;
unsigned char hold3 = 0x00;
unsigned char count = 0x00;

void toggle() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch (state){//transition
  b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	a1 f1       	breq	.+104    	; 0x12c <toggle+0x7e>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	2c f4       	brge	.+10     	; 0xd4 <toggle+0x26>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	59 f0       	breq	.+22     	; 0xe4 <toggle+0x36>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	69 f0       	breq	.+26     	; 0xec <toggle+0x3e>
  d2:	e5 c0       	rjmp	.+458    	; 0x29e <toggle+0x1f0>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <toggle+0x2e>
  da:	5b c0       	rjmp	.+182    	; 0x192 <toggle+0xe4>
  dc:	04 97       	sbiw	r24, 0x04	; 4
  de:	09 f4       	brne	.+2      	; 0xe2 <toggle+0x34>
  e0:	9b c0       	rjmp	.+310    	; 0x218 <toggle+0x16a>
  e2:	dd c0       	rjmp	.+442    	; 0x29e <toggle+0x1f0>
		case Start:
			state = WaitPress;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
  ea:	dc c0       	rjmp	.+440    	; 0x2a4 <toggle+0x1f6>
		case WaitPress:
			if ((hold1 != 0x00) || (hold2 != 0x00)){
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
  f0:	88 23       	and	r24, r24
  f2:	21 f4       	brne	.+8      	; 0xfc <toggle+0x4e>
  f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <toggle+0x56>
				state = PressHash;
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
			}
			break;
 102:	d0 c0       	rjmp	.+416    	; 0x2a4 <toggle+0x1f6>
			state = WaitPress;
			break;
		case WaitPress:
			if ((hold1 != 0x00) || (hold2 != 0x00)){
				state = PressHash;
			} else if (hold != 0x00){
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	88 23       	and	r24, r24
 10a:	21 f0       	breq	.+8      	; 0x114 <toggle+0x66>
				state = PressX;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
			}
			break;
 112:	c8 c0       	rjmp	.+400    	; 0x2a4 <toggle+0x1f6>
		case WaitPress:
			if ((hold1 != 0x00) || (hold2 != 0x00)){
				state = PressHash;
			} else if (hold != 0x00){
				state = PressX;
			} else if (hold3 != 0x00){
 114:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 118:	88 23       	and	r24, r24
 11a:	21 f0       	breq	.+8      	; 0x124 <toggle+0x76>
				state = Lock;
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else {
				state = WaitPress;
			}
			break;
 122:	c0 c0       	rjmp	.+384    	; 0x2a4 <toggle+0x1f6>
			} else if (hold != 0x00){
				state = PressX;
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			}
			break;
 12a:	bc c0       	rjmp	.+376    	; 0x2a4 <toggle+0x1f6>
		case PressX:
		count = 0;
 12c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
		PORTC = count;
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
			while (hold == (PINA & 0x01)){
 13c:	1a c0       	rjmp	.+52     	; 0x172 <toggle+0xc4>
				if (hold != 0x00){
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 142:	88 23       	and	r24, r24
 144:	69 f0       	breq	.+26     	; 0x160 <toggle+0xb2>
					count = 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
					state = Lock;
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 15e:	09 c0       	rjmp	.+18     	; 0x172 <toggle+0xc4>
				} else if (hold3 != 0x00){
 160:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 164:	88 23       	and	r24, r24
 166:	29 f0       	breq	.+10     	; 0x172 <toggle+0xc4>
					state = Lock;
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 16e:	00 00       	nop
				}
			}
			break;
 170:	99 c0       	rjmp	.+306    	; 0x2a4 <toggle+0x1f6>
			}
			break;
		case PressX:
		count = 0;
		PORTC = count;
			while (hold == (PINA & 0x01)){
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	81 70       	andi	r24, 0x01	; 1
 188:	99 27       	eor	r25, r25
 18a:	28 17       	cp	r18, r24
 18c:	39 07       	cpc	r19, r25
 18e:	b9 f2       	breq	.-82     	; 0x13e <toggle+0x90>
				} else if (hold3 != 0x00){
					state = Lock;
					break;
				}
			}
			break;
 190:	89 c0       	rjmp	.+274    	; 0x2a4 <toggle+0x1f6>
		case PressY:
			count = 0;
 192:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			PORTC = count;
 196:	88 e2       	ldi	r24, 0x28	; 40
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
			if (hold2 != 0x00){
 1a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 1a6:	88 23       	and	r24, r24
 1a8:	39 f1       	breq	.+78     	; 0x1f8 <toggle+0x14a>
				count = 4;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
				PORTC = count;
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
				state = WaitPress;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
				break;
 1c2:	70 c0       	rjmp	.+224    	; 0x2a4 <toggle+0x1f6>
			}
			while (hold1 == (PINA & 0x02)){
				if (hold1 != 0x00){
 1c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 1c8:	88 23       	and	r24, r24
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <toggle+0x138>
					count = 2;
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
					state = Unlock;
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <toggle+0x14a>
				} else if (hold3 != 0x00){
 1e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 1ea:	88 23       	and	r24, r24
 1ec:	29 f0       	breq	.+10     	; 0x1f8 <toggle+0x14a>
					state = Lock;
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 1f4:	00 00       	nop
				}
			}
		break;
 1f6:	56 c0       	rjmp	.+172    	; 0x2a4 <toggle+0x1f6>
				count = 4;
				PORTC = count;
				state = WaitPress;
				break;
			}
			while (hold1 == (PINA & 0x02)){
 1f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	80 e2       	ldi	r24, 0x20	; 32
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	80 81       	ld	r24, Z
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	82 70       	andi	r24, 0x02	; 2
 20e:	99 27       	eor	r25, r25
 210:	28 17       	cp	r18, r24
 212:	39 07       	cpc	r19, r25
 214:	b9 f2       	breq	.-82     	; 0x1c4 <toggle+0x116>
				} else if (hold3 != 0x00){
					state = Lock;
					break;
				}
			}
		break;
 216:	46 c0       	rjmp	.+140    	; 0x2a4 <toggle+0x1f6>
		case PressHash:
			count = 0;
 218:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			PORTC = count;
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
			if (hold1 != 0x00){
 228:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 22c:	88 23       	and	r24, r24
 22e:	39 f1       	breq	.+78     	; 0x27e <toggle+0x1d0>
				count = 2;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
				PORTC = count;
 236:	88 e2       	ldi	r24, 0x28	; 40
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
				state = WaitPress;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
				break;
 248:	2d c0       	rjmp	.+90     	; 0x2a4 <toggle+0x1f6>
			}
			while (hold2 == (PINA & 0x04)){
				if (hold2 != 0x00){
 24a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 24e:	88 23       	and	r24, r24
 250:	69 f0       	breq	.+26     	; 0x26c <toggle+0x1be>
					count = 4;
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 258:	88 e2       	ldi	r24, 0x28	; 40
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
					state = PressY;
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 26a:	09 c0       	rjmp	.+18     	; 0x27e <toggle+0x1d0>
				} else if (hold3 != 0x00){
 26c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 270:	88 23       	and	r24, r24
 272:	29 f0       	breq	.+10     	; 0x27e <toggle+0x1d0>
					state = Lock;
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					break;
 27a:	00 00       	nop
				}
			}
		break;
 27c:	13 c0       	rjmp	.+38     	; 0x2a4 <toggle+0x1f6>
				count = 2;
				PORTC = count;
				state = WaitPress;
				break;
			}
			while (hold2 == (PINA & 0x04)){
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 282:	28 2f       	mov	r18, r24
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	80 81       	ld	r24, Z
 28e:	88 2f       	mov	r24, r24
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	84 70       	andi	r24, 0x04	; 4
 294:	99 27       	eor	r25, r25
 296:	28 17       	cp	r18, r24
 298:	39 07       	cpc	r19, r25
 29a:	b9 f2       	breq	.-82     	; 0x24a <toggle+0x19c>
				} else if (hold3 != 0x00){
					state = Lock;
					break;
				}
			}
		break;
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <toggle+0x1f6>
		default:
			state = Start;
 29e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state>
			break;
 2a2:	00 00       	nop
	}
	
	switch (state){//actions
 2a4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	86 30       	cpi	r24, 0x06	; 6
 2ae:	91 05       	cpc	r25, r1
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <toggle+0x20a>
 2b2:	07 97       	sbiw	r24, 0x07	; 7
 2b4:	71 f0       	breq	.+28     	; 0x2d2 <toggle+0x224>
			PORTB = 0;
			PORTC = 0;
			state = WaitPress;
			break;
	}
}
 2b6:	1b c0       	rjmp	.+54     	; 0x2ee <toggle+0x240>
			break;
	}
	
	switch (state){//actions
		case Unlock:
			PORTB = 1;
 2b8:	85 e2       	ldi	r24, 0x25	; 37
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
			PORTC = 0;
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	10 82       	st	Z, r1
			state = WaitPress;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
 2d0:	0e c0       	rjmp	.+28     	; 0x2ee <toggle+0x240>
		case Lock:
			count = 0;
 2d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			PORTB = 0;
 2d6:	85 e2       	ldi	r24, 0x25	; 37
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	10 82       	st	Z, r1
			PORTC = 0;
 2de:	88 e2       	ldi	r24, 0x28	; 40
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	10 82       	st	Z, r1
			state = WaitPress;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
 2ec:	00 00       	nop
	}
}
 2ee:	00 00       	nop
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <main>:

int main(void)
{
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // config
 2fe:	81 e2       	ldi	r24, 0x21	; 33
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	fc 01       	movw	r30, r24
 304:	10 82       	st	Z, r1
 306:	82 e2       	ldi	r24, 0x22	; 34
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // config
 310:	84 e2       	ldi	r24, 0x24	; 36
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
 31a:	85 e2       	ldi	r24, 0x25	; 37
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // config
 322:	87 e2       	ldi	r24, 0x27	; 39
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
 32c:	88 e2       	ldi	r24, 0x28	; 40
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	10 82       	st	Z, r1
		count = 0;
 334:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
		PORTB = 0;
 338:	85 e2       	ldi	r24, 0x25	; 37
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	10 82       	st	Z, r1
    while (1) 
    {
		hold = PINA & 0x01;
 340:	80 e2       	ldi	r24, 0x20	; 32
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		hold1 = PINA & 0x02;
 34e:	80 e2       	ldi	r24, 0x20	; 32
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	80 81       	ld	r24, Z
 356:	82 70       	andi	r24, 0x02	; 2
 358:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hold1>
		hold2 = PINA & 0x04;
 35c:	80 e2       	ldi	r24, 0x20	; 32
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	80 81       	ld	r24, Z
 364:	84 70       	andi	r24, 0x04	; 4
 366:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hold2>
		hold3 = PINA & 0x80;
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	80 78       	andi	r24, 0x80	; 128
 374:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <hold3>
		toggle();
 378:	9a de       	rcall	.-716    	; 0xae <toggle>
    }
 37a:	e2 cf       	rjmp	.-60     	; 0x340 <main+0x4a>

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
