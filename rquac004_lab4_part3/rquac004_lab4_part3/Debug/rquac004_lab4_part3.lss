
rquac004_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008db  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039f  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	da d0       	rcall	.+436    	; 0x25e <main>
  aa:	1c c1       	rjmp	.+568    	; 0x2e4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <toggle>:
unsigned char hold1 = 0x00;
unsigned char hold2 = 0x00;
unsigned char hold3 = 0x00;
unsigned char count = 0x00;

void toggle() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch (state){//transition
  b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <toggle+0x18>
  c4:	48 c0       	rjmp	.+144    	; 0x156 <toggle+0xa8>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	91 05       	cpc	r25, r1
  ca:	2c f4       	brge	.+10     	; 0xd6 <toggle+0x28>
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	59 f0       	breq	.+22     	; 0xe6 <toggle+0x38>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	69 f0       	breq	.+26     	; 0xee <toggle+0x40>
  d4:	a0 c0       	rjmp	.+320    	; 0x216 <toggle+0x168>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <toggle+0x30>
  dc:	64 c0       	rjmp	.+200    	; 0x1a6 <toggle+0xf8>
  de:	04 97       	sbiw	r24, 0x04	; 4
  e0:	09 f4       	brne	.+2      	; 0xe4 <toggle+0x36>
  e2:	89 c0       	rjmp	.+274    	; 0x1f6 <toggle+0x148>
  e4:	98 c0       	rjmp	.+304    	; 0x216 <toggle+0x168>
		case Start:
			state = WaitPress;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
  ec:	97 c0       	rjmp	.+302    	; 0x21c <toggle+0x16e>
		case WaitPress:
			if ((hold != 0x00) || (hold1 != 0x00) || (hold2 != 0x00)){
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	88 23       	and	r24, r24
  f4:	41 f4       	brne	.+16     	; 0x106 <toggle+0x58>
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
  fa:	88 23       	and	r24, r24
  fc:	21 f4       	brne	.+8      	; 0x106 <toggle+0x58>
  fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 102:	88 23       	and	r24, r24
 104:	21 f0       	breq	.+8      	; 0x10e <toggle+0x60>
				state = PressX;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
			}
			break;
 10c:	87 c0       	rjmp	.+270    	; 0x21c <toggle+0x16e>
			state = WaitPress;
			break;
		case WaitPress:
			if ((hold != 0x00) || (hold1 != 0x00) || (hold2 != 0x00)){
				state = PressX;
			} else if (hold3 != 0x00){
 10e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 112:	88 23       	and	r24, r24
 114:	21 f0       	breq	.+8      	; 0x11e <toggle+0x70>
				state = Lock;
 116:	87 e0       	ldi	r24, 0x07	; 7
 118:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else {
				state = WaitPress;
			}
			break;
 11c:	7f c0       	rjmp	.+254    	; 0x21c <toggle+0x16e>
			if ((hold != 0x00) || (hold1 != 0x00) || (hold2 != 0x00)){
				state = PressX;
			} else if (hold3 != 0x00){
				state = Lock;
			} else {
				state = WaitPress;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			}
			break;
 124:	7b c0       	rjmp	.+246    	; 0x21c <toggle+0x16e>
		case PressX:
			while (hold == (PINA & 0x01)){
				if (hold != 0x00){
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12a:	88 23       	and	r24, r24
 12c:	69 f0       	breq	.+26     	; 0x148 <toggle+0x9a>
					count = 1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 134:	88 e2       	ldi	r24, 0x28	; 40
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
					state = PressY;
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 146:	07 c0       	rjmp	.+14     	; 0x156 <toggle+0xa8>
				} else if (hold3 != 0x00){
 148:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 14c:	88 23       	and	r24, r24
 14e:	19 f0       	breq	.+6      	; 0x156 <toggle+0xa8>
					state = Lock;
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			} else {
				state = WaitPress;
			}
			break;
		case PressX:
			while (hold == (PINA & 0x01)){
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	80 81       	ld	r24, Z
 166:	88 2f       	mov	r24, r24
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	81 70       	andi	r24, 0x01	; 1
 16c:	99 27       	eor	r25, r25
 16e:	28 17       	cp	r18, r24
 170:	39 07       	cpc	r19, r25
 172:	c9 f2       	breq	.-78     	; 0x126 <toggle+0x78>
					state = PressY;
				} else if (hold3 != 0x00){
					state = Lock;
				}
			}
			break;
 174:	53 c0       	rjmp	.+166    	; 0x21c <toggle+0x16e>
		case PressY:
			while (hold1 == (PINA & 0x02)){
				if (hold1 != 0x00){
 176:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 17a:	88 23       	and	r24, r24
 17c:	69 f0       	breq	.+26     	; 0x198 <toggle+0xea>
					count = 2;
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
					state = PressHash;
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <toggle+0xf8>
				} else if (hold3 != 0x00){
 198:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 19c:	88 23       	and	r24, r24
 19e:	19 f0       	breq	.+6      	; 0x1a6 <toggle+0xf8>
					state = Lock;
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					state = Lock;
				}
			}
			break;
		case PressY:
			while (hold1 == (PINA & 0x02)){
 1a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fc 01       	movw	r30, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	82 70       	andi	r24, 0x02	; 2
 1bc:	99 27       	eor	r25, r25
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	c9 f2       	breq	.-78     	; 0x176 <toggle+0xc8>
					state = PressHash;
				} else if (hold3 != 0x00){
					state = Lock;
				}
			}
		break;
 1c4:	2b c0       	rjmp	.+86     	; 0x21c <toggle+0x16e>
		case PressHash:
			while (hold2 == (PINA & 0x04)){
				if (hold2 != 0x00){
 1c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 1ca:	88 23       	and	r24, r24
 1cc:	69 f0       	breq	.+26     	; 0x1e8 <toggle+0x13a>
					count = 4;
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
					PORTC = count;
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <count>
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
					state = Unlock;
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <toggle+0x148>
				} else if (hold3 != 0x00){
 1e8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <hold3>
 1ec:	88 23       	and	r24, r24
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <toggle+0x148>
					state = Lock;
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
					state = Lock;
				}
			}
		break;
		case PressHash:
			while (hold2 == (PINA & 0x04)){
 1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold2>
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	80 81       	ld	r24, Z
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	84 70       	andi	r24, 0x04	; 4
 20c:	99 27       	eor	r25, r25
 20e:	28 17       	cp	r18, r24
 210:	39 07       	cpc	r19, r25
 212:	c9 f2       	breq	.-78     	; 0x1c6 <toggle+0x118>
					state = Unlock;
				} else if (hold3 != 0x00){
					state = Lock;
				}
			}
		break;
 214:	03 c0       	rjmp	.+6      	; 0x21c <toggle+0x16e>
		default:
			state = Start;
 216:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state>
			break;
 21a:	00 00       	nop
	}
	
	switch (state){//actions
 21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	86 30       	cpi	r24, 0x06	; 6
 226:	91 05       	cpc	r25, r1
 228:	19 f0       	breq	.+6      	; 0x230 <toggle+0x182>
 22a:	07 97       	sbiw	r24, 0x07	; 7
 22c:	51 f0       	breq	.+20     	; 0x242 <toggle+0x194>
			count = 0;
			PORTB = 0;
			state = WaitPress;
			break;
	}
}
 22e:	13 c0       	rjmp	.+38     	; 0x256 <toggle+0x1a8>
			break;
	}
	
	switch (state){//actions
		case Unlock:
			PORTB = 1;
 230:	85 e2       	ldi	r24, 0x25	; 37
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
			state = WaitPress;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
 240:	0a c0       	rjmp	.+20     	; 0x256 <toggle+0x1a8>
		case Lock:
			count = 0;
 242:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			PORTB = 0;
 246:	85 e2       	ldi	r24, 0x25	; 37
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	fc 01       	movw	r30, r24
 24c:	10 82       	st	Z, r1
			state = WaitPress;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
			break;
 254:	00 00       	nop
	}
}
 256:	00 00       	nop
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <main>:

int main(void)
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // config
 266:	81 e2       	ldi	r24, 0x21	; 33
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	fc 01       	movw	r30, r24
 26c:	10 82       	st	Z, r1
 26e:	82 e2       	ldi	r24, 0x22	; 34
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // config
 278:	84 e2       	ldi	r24, 0x24	; 36
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
 282:	85 e2       	ldi	r24, 0x25	; 37
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // config
 28a:	87 e2       	ldi	r24, 0x27	; 39
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	10 82       	st	Z, r1
		count = 0;
 29c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
		PORTB = 0;
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	10 82       	st	Z, r1
    while (1) 
    {
		hold = PINA & 0x01;
 2a8:	80 e2       	ldi	r24, 0x20	; 32
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	fc 01       	movw	r30, r24
 2ae:	80 81       	ld	r24, Z
 2b0:	81 70       	andi	r24, 0x01	; 1
 2b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		hold1 = PINA & 0x02;
 2b6:	80 e2       	ldi	r24, 0x20	; 32
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	80 81       	ld	r24, Z
 2be:	82 70       	andi	r24, 0x02	; 2
 2c0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hold1>
		hold2 = PINA & 0x04;
 2c4:	80 e2       	ldi	r24, 0x20	; 32
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	80 81       	ld	r24, Z
 2cc:	84 70       	andi	r24, 0x04	; 4
 2ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hold2>
		hold3 = PINA & 0x80;
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	fc 01       	movw	r30, r24
 2d8:	80 81       	ld	r24, Z
 2da:	80 78       	andi	r24, 0x80	; 128
 2dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <hold3>
		toggle();
 2e0:	e6 de       	rcall	.-564    	; 0xae <toggle>
    }
 2e2:	e2 cf       	rjmp	.-60     	; 0x2a8 <main+0x4a>

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
