
rquac004_lab3_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088f  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000403  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	20 d0       	rcall	.+64     	; 0xda <main>
  9a:	6e c0       	rjmp	.+220    	; 0x178 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GetBit>:
 * Created: 4/9/2019 5:56:32 PM
 */ 

#include <avr/io.h>

unsigned char GetBit(unsigned char x, unsigned char k) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <GetBit+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	88 2f       	mov	r24, r24
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a 81       	ldd	r18, Y+2	; 0x02
  b4:	22 2f       	mov	r18, r18
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <GetBit+0x20>
  ba:	95 95       	asr	r25
  bc:	87 95       	ror	r24
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <GetBit+0x1c>
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	99 27       	eor	r25, r25
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	89 2b       	or	r24, r25
  ca:	09 f4       	brne	.+2      	; 0xce <GetBit+0x30>
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	82 2f       	mov	r24, r18
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:



int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x8>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
  e6:	81 e2       	ldi	r24, 0x21	; 33
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	10 82       	st	Z, r1
  ee:	82 e2       	ldi	r24, 0x22	; 34
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF;
  f8:	84 e2       	ldi	r24, 0x24	; 36
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fc 01       	movw	r30, r24
  fe:	10 82       	st	Z, r1
 100:	85 e2       	ldi	r24, 0x25	; 37
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 10a:	87 e2       	ldi	r24, 0x27	; 39
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	88 e2       	ldi	r24, 0x28	; 40
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	10 82       	st	Z, r1
	unsigned char check = 0x00;
 11c:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char count = 0x00;
 11e:	19 82       	std	Y+1, r1	; 0x01
	
	while(1){

		unsigned char i = 0x00;
 120:	1a 82       	std	Y+2, r1	; 0x02
		unsigned char a = 0x01;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	8c 83       	std	Y+4, r24	; 0x04
		count = 0x00;
 126:	19 82       	std	Y+1, r1	; 0x01
		for (i = 0; i < 7; i = i + 1){ //run through everything
 128:	1a 82       	std	Y+2, r1	; 0x02
 12a:	1d c0       	rjmp	.+58     	; 0x166 <main+0x8c>
			check = PINA & (a << i);
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	80 81       	ld	r24, Z
 134:	48 2f       	mov	r20, r24
 136:	8c 81       	ldd	r24, Y+4	; 0x04
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2a 81       	ldd	r18, Y+2	; 0x02
 13e:	22 2f       	mov	r18, r18
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0x6e>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	2a 95       	dec	r18
 14a:	e2 f7       	brpl	.-8      	; 0x144 <main+0x6a>
 14c:	84 23       	and	r24, r20
 14e:	8b 83       	std	Y+3, r24	; 0x03
			if(GetBit(check, i)) { // see if the current bit is a 1
 150:	6a 81       	ldd	r22, Y+2	; 0x02
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	a4 df       	rcall	.-184    	; 0x9e <GetBit>
 156:	88 23       	and	r24, r24
 158:	19 f0       	breq	.+6      	; 0x160 <main+0x86>
				count = count + 1;
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	89 83       	std	Y+1, r24	; 0x01
	while(1){

		unsigned char i = 0x00;
		unsigned char a = 0x01;
		count = 0x00;
		for (i = 0; i < 7; i = i + 1){ //run through everything
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	8a 83       	std	Y+2, r24	; 0x02
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	87 30       	cpi	r24, 0x07	; 7
 16a:	00 f3       	brcs	.-64     	; 0x12c <main+0x52>
			if(GetBit(check, i)) { // see if the current bit is a 1
				count = count + 1;
			}
		}

		PORTC = count;
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	}
 176:	d4 cf       	rjmp	.-88     	; 0x120 <main+0x46>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
