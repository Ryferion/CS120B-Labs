
[rquac004]_lab[2]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085a  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077f  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000448  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000109  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001989  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2f c0       	rjmp	.+94     	; 0xfa <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	
#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // config
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // config
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // config
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	18 b8       	out	0x08, r1	; 8
		// reading
		hold1 = PINA & 0x01;
		hold2 = PINA & 0x02;
		hold3 = PINA & 0x04;
		hold4 = PINA & 0x08;
		cntavail = 0x00;
  ac:	40 e0       	ldi	r20, 0x00	; 0
		
		if ((hold1 != 0x00) && (hold2 != 0x00) && (hold3 != 0x00) && (hold4 != 0x00)){
			cntavail  = cntavail | 0x80;
  ae:	60 e8       	ldi	r22, 0x80	; 128
		if (hold4 != 0x00) {
			cntavail = cntavail + 1;
		}

			PORTC = 0x00;
			PORTC = 4 - cntavail;
  b0:	54 e0       	ldi	r21, 0x04	; 4
	
	//hold = 1 means a car is parked in the space, there are four parking spaces
	while(1)
	{
		// reading
		hold1 = PINA & 0x01;
  b2:	80 b1       	in	r24, 0x00	; 0
		hold2 = PINA & 0x02;
  b4:	90 b1       	in	r25, 0x00	; 0
  b6:	92 70       	andi	r25, 0x02	; 2
		hold3 = PINA & 0x04;
  b8:	20 b1       	in	r18, 0x00	; 0
  ba:	24 70       	andi	r18, 0x04	; 4
		hold4 = PINA & 0x08;
  bc:	30 b1       	in	r19, 0x00	; 0
  be:	38 70       	andi	r19, 0x08	; 8
		cntavail = 0x00;
		
		if ((hold1 != 0x00) && (hold2 != 0x00) && (hold3 != 0x00) && (hold4 != 0x00)){
  c0:	80 ff       	sbrs	r24, 0
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <main+0x36>
  c4:	99 23       	and	r25, r25
  c6:	91 f0       	breq	.+36     	; 0xec <main+0x4e>
  c8:	22 23       	and	r18, r18
  ca:	91 f0       	breq	.+36     	; 0xf0 <main+0x52>
  cc:	33 23       	and	r19, r19
  ce:	91 f0       	breq	.+36     	; 0xf4 <main+0x56>
			cntavail  = cntavail | 0x80;
  d0:	86 2f       	mov	r24, r22
  d2:	11 c0       	rjmp	.+34     	; 0xf6 <main+0x58>
		// reading
		hold1 = PINA & 0x01;
		hold2 = PINA & 0x02;
		hold3 = PINA & 0x04;
		hold4 = PINA & 0x08;
		cntavail = 0x00;
  d4:	80 e0       	ldi	r24, 0x00	; 0
		}
		
		if (hold1 != 0x00) {
			cntavail = cntavail + 1;
		} 
		if (hold2 != 0x00) {
  d6:	91 11       	cpse	r25, r1
			cntavail = cntavail + 1;
  d8:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (hold3 != 0x00) {
  da:	21 11       	cpse	r18, r1
			cntavail = cntavail + 1;
  dc:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (hold4 != 0x00) {
  de:	31 11       	cpse	r19, r1
			cntavail = cntavail + 1;
  e0:	8f 5f       	subi	r24, 0xFF	; 255
		}

			PORTC = 0x00;
  e2:	48 b9       	out	0x08, r20	; 8
			PORTC = 4 - cntavail;
  e4:	95 2f       	mov	r25, r21
  e6:	98 1b       	sub	r25, r24
  e8:	98 b9       	out	0x08, r25	; 8
	unsigned char hold4 = 0x00; // Input
	unsigned char cntavail = 0x00; // PORTC = cntavail;
	//unsigned char out1 = 0x00; // Output
	
	//hold = 1 means a car is parked in the space, there are four parking spaces
	while(1)
  ea:	e3 cf       	rjmp	.-58     	; 0xb2 <main+0x14>
		// reading
		hold1 = PINA & 0x01;
		hold2 = PINA & 0x02;
		hold3 = PINA & 0x04;
		hold4 = PINA & 0x08;
		cntavail = 0x00;
  ec:	84 2f       	mov	r24, r20
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x58>
  f0:	84 2f       	mov	r24, r20
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <main+0x58>
  f4:	84 2f       	mov	r24, r20
		if ((hold1 != 0x00) && (hold2 != 0x00) && (hold3 != 0x00) && (hold4 != 0x00)){
			cntavail  = cntavail | 0x80;
		}
		
		if (hold1 != 0x00) {
			cntavail = cntavail + 1;
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	ee cf       	rjmp	.-36     	; 0xd6 <main+0x38>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
