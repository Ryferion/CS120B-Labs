
rquac004_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b4  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039b  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002f  00000000  00000000  00001bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	99 d0       	rcall	.+306    	; 0x1dc <main>
  aa:	b0 c0       	rjmp	.+352    	; 0x20c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <toggle>:

unsigned char hold = 0x00;
unsigned char hold1 = 0x00;
unsigned char count = 0x00;

void toggle() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	switch (state){//transition
  b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	09 f4       	brne	.+2      	; 0xbc <toggle+0xe>
  ba:	4e c0       	rjmp	.+156    	; 0x158 <toggle+0xaa>
  bc:	28 f4       	brcc	.+10     	; 0xc8 <toggle+0x1a>
  be:	88 23       	and	r24, r24
  c0:	51 f0       	breq	.+20     	; 0xd6 <toggle+0x28>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	61 f0       	breq	.+24     	; 0xde <toggle+0x30>
  c6:	84 c0       	rjmp	.+264    	; 0x1d0 <toggle+0x122>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	09 f4       	brne	.+2      	; 0xce <toggle+0x20>
  cc:	5d c0       	rjmp	.+186    	; 0x188 <toggle+0xda>
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	09 f4       	brne	.+2      	; 0xd4 <toggle+0x26>
  d2:	77 c0       	rjmp	.+238    	; 0x1c2 <toggle+0x114>
  d4:	7d c0       	rjmp	.+250    	; 0x1d0 <toggle+0x122>
		case Start:
			state = WaitPress;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
  dc:	7c c0       	rjmp	.+248    	; 0x1d6 <toggle+0x128>
		case WaitPress:
			if ((hold == 0x00) && (hold1 == 0x00)){
  de:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <hold>
  e2:	41 11       	cpse	r20, r1
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <toggle+0x46>
  e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
  ea:	81 11       	cpse	r24, r1
  ec:	0a c0       	rjmp	.+20     	; 0x102 <toggle+0x54>
				state = Start;
  ee:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
				break;
  f2:	71 c0       	rjmp	.+226    	; 0x1d6 <toggle+0x128>
			}
			 if ((hold != 0x00) && (hold1 != 0x00)){
  f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
  f8:	88 23       	and	r24, r24
  fa:	19 f0       	breq	.+6      	; 0x102 <toggle+0x54>
				 state = PressBoth;
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			 }
			while ((hold == (~PINA & 0x01)) && (hold1 == (~PINA & 0x02))){
 102:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <hold1>
 106:	ea 2f       	mov	r30, r26
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	64 2f       	mov	r22, r20
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	51 e0       	ldi	r21, 0x01	; 1
				}
				else if (hold != 0x00){
					state = PressOne;
				}
				else if (hold1 != 0x00) {
					state = PressTwo;
 110:	d3 e0       	ldi	r29, 0x03	; 3
			while ((hold == (~PINA & 0x01)) && (hold1 == (~PINA & 0x02))){
				if ((hold != 0x00) && (hold1 != 0x00)){
					state = PressBoth;
				}
				else if (hold != 0x00){
					state = PressOne;
 112:	b2 e0       	ldi	r27, 0x02	; 2
			 if ((hold != 0x00) && (hold1 != 0x00)){
				 state = PressBoth;
			 }
			while ((hold == (~PINA & 0x01)) && (hold1 == (~PINA & 0x02))){
				if ((hold != 0x00) && (hold1 != 0x00)){
					state = PressBoth;
 114:	c4 e0       	ldi	r28, 0x04	; 4
 116:	0d c0       	rjmp	.+26     	; 0x132 <toggle+0x84>
			}
			 if ((hold != 0x00) && (hold1 != 0x00)){
				 state = PressBoth;
			 }
			while ((hold == (~PINA & 0x01)) && (hold1 == (~PINA & 0x02))){
				if ((hold != 0x00) && (hold1 != 0x00)){
 118:	44 23       	and	r20, r20
 11a:	41 f0       	breq	.+16     	; 0x12c <toggle+0x7e>
 11c:	aa 23       	and	r26, r26
 11e:	19 f0       	breq	.+6      	; 0x126 <toggle+0x78>
					state = PressBoth;
 120:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <state>
 124:	06 c0       	rjmp	.+12     	; 0x132 <toggle+0x84>
				}
				else if (hold != 0x00){
					state = PressOne;
 126:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <state>
 12a:	03 c0       	rjmp	.+6      	; 0x132 <toggle+0x84>
				}
				else if (hold1 != 0x00) {
 12c:	a1 11       	cpse	r26, r1
					state = PressTwo;
 12e:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <state>
				break;
			}
			 if ((hold != 0x00) && (hold1 != 0x00)){
				 state = PressBoth;
			 }
			while ((hold == (~PINA & 0x01)) && (hold1 == (~PINA & 0x02))){
 132:	80 b1       	in	r24, 0x00	; 0
 134:	85 27       	eor	r24, r21
 136:	28 2f       	mov	r18, r24
 138:	21 70       	andi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	62 17       	cp	r22, r18
 13e:	73 07       	cpc	r23, r19
 140:	09 f0       	breq	.+2      	; 0x144 <toggle+0x96>
 142:	49 c0       	rjmp	.+146    	; 0x1d6 <toggle+0x128>
 144:	80 b1       	in	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	80 95       	com	r24
 14a:	90 95       	com	r25
 14c:	82 70       	andi	r24, 0x02	; 2
 14e:	99 27       	eor	r25, r25
 150:	e8 17       	cp	r30, r24
 152:	f9 07       	cpc	r31, r25
 154:	09 f3       	breq	.-62     	; 0x118 <toggle+0x6a>
 156:	3f c0       	rjmp	.+126    	; 0x1d6 <toggle+0x128>
					state = PressBoth;
				}
			}
			break;
		case PressOne:
			if (count < 9){
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15c:	89 30       	cpi	r24, 0x09	; 9
 15e:	20 f4       	brcc	.+8      	; 0x168 <toggle+0xba>
				count = count + 1;
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				PORTC = count;
 166:	88 b9       	out	0x08, r24	; 8
			}
			 if ((hold != 0x00) && (hold1 != 0x00)){
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold>
 16c:	88 23       	and	r24, r24
 16e:	41 f0       	breq	.+16     	; 0x180 <toggle+0xd2>
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 174:	88 23       	and	r24, r24
 176:	21 f0       	breq	.+8      	; 0x180 <toggle+0xd2>
				 state = PressBoth;
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				 break;
 17e:	2b c0       	rjmp	.+86     	; 0x1d6 <toggle+0x128>
			 }
			state = WaitPress;	
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 186:	27 c0       	rjmp	.+78     	; 0x1d6 <toggle+0x128>
		case PressTwo:
			if ((hold != 0x00) && (hold1 != 0x00)){
 188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hold>
 18c:	88 23       	and	r24, r24
 18e:	41 f0       	breq	.+16     	; 0x1a0 <toggle+0xf2>
 190:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hold1>
 194:	88 23       	and	r24, r24
 196:	21 f0       	breq	.+8      	; 0x1a0 <toggle+0xf2>
				state = PressBoth;
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 19e:	1b c0       	rjmp	.+54     	; 0x1d6 <toggle+0x128>
			}
			if (count == 0){
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a4:	81 11       	cpse	r24, r1
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <toggle+0x104>
				PORTC = count;
 1a8:	18 b8       	out	0x08, r1	; 8
				state = WaitPress;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
				break;
 1b0:	12 c0       	rjmp	.+36     	; 0x1d6 <toggle+0x128>
			}
			else if (count >= 0){
				count = count - 1;
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				PORTC = count;
 1b8:	88 b9       	out	0x08, r24	; 8
			}
			state = WaitPress;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <toggle+0x128>
		case PressBoth:
			count = 0;
 1c2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTC = count;
 1c6:	18 b8       	out	0x08, r1	; 8
			state = WaitPress;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <toggle+0x128>
		default:
			state = WaitPress;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
	}
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // config
 1dc:	11 b8       	out	0x01, r1	; 1
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // config
 1e2:	84 b9       	out	0x04, r24	; 4
 1e4:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // config
 1e6:	87 b9       	out	0x07, r24	; 7
 1e8:	18 b8       	out	0x08, r1	; 8
		count = 7;
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTC = 7;
 1f0:	88 b9       	out	0x08, r24	; 8

	while (1) 
    {
		hold = ~PINA & 0x01;
 1f2:	c1 e0       	ldi	r28, 0x01	; 1
 1f4:	80 b1       	in	r24, 0x00	; 0
 1f6:	8c 27       	eor	r24, r28
 1f8:	81 70       	andi	r24, 0x01	; 1
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hold>
		hold1 = ~PINA & 0x02;
 1fe:	80 b1       	in	r24, 0x00	; 0
 200:	80 95       	com	r24
 202:	82 70       	andi	r24, 0x02	; 2
 204:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hold1>
		toggle();
 208:	52 df       	rcall	.-348    	; 0xae <toggle>
 20a:	f4 cf       	rjmp	.-24     	; 0x1f4 <main+0x18>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
